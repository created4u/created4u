<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AWS Notes</title>
    <url>/created4u/2022/12/23/AWSCloudPractionerEssential/</url>
    <content><![CDATA[<h1 id="云计算"><a href="#云计算" class="headerlink" title="云计算"></a>云计算</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>云计算就是通过互联网<strong>按需提供</strong> IT 资源并采用<strong>按需付费</strong>定价模式。</p>
<h2 id="部署模式"><a href="#部署模式" class="headerlink" title="部署模式"></a>部署模式</h2><ul>
<li>云端部署<ul>
<li>在云中运行应用程序的所有组件</li>
<li>将现有应用程序迁移到云</li>
<li>在云中设计和构建新的应用程序</li>
</ul>
</li>
<li>本地部署&#x2F;私有云部署<ul>
<li>利用虚拟化工具和资源管理工具部署资源</li>
<li>利用应用程序和虚拟化技术提高资源利用率</li>
</ul>
</li>
<li>混合部署<ul>
<li>将基于云的资源与本地基础设施连接</li>
<li>将基于云的资源与传统 IT 应用程序集成</li>
</ul>
</li>
</ul>
<h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ol>
<li><p>将前期费用变成可变支出</p>
<p> 前期费用是指您在使用数据中心、物理服务器和其他资源之前需要为其投入的费用。可变支出意味着您只需为消耗的计算资源付费，而不需要在知道自己会如何使用数据中心和服务器之前进行大量投资。</p>
</li>
<li><p>无需在数据中心运行和维护方面投入资金</p>
</li>
<li><p>无需猜测容量</p>
</li>
<li><p>实现规模经济效益</p>
</li>
<li><p>提高速度和敏捷性</p>
</li>
<li><p>几分钟内实现全球化部署</p>
</li>
</ol>
<h1 id="EC2"><a href="#EC2" class="headerlink" title="EC2"></a>EC2</h1><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><ol>
<li><p>启动</p>
<p> 为实例选择具有基本配置的模板，包括操作系统，应用程序服务器或应用程序。还要选择实例类型，即实例的具体硬件配置。</p>
</li>
<li><p>连接</p>
</li>
<li><p>使用</p>
</li>
</ol>
<h2 id="实例类型"><a href="#实例类型" class="headerlink" title="实例类型"></a>实例类型</h2><ol>
<li><p>通用型</p>
<p> 实现计算，内存和网络资源的均衡。</p>
<ul>
<li>应用程序服务器</li>
<li>游戏服务器</li>
<li>企业应用程序的后端服务器</li>
<li>中小型数据库</li>
</ul>
</li>
<li><p>计算优化型</p>
<p> 适合需要使用高性能处理器的计算密集型应用程序。</p>
<ul>
<li>高性能 Web 服务器</li>
<li>计算密集型应用程序服务器</li>
<li>专用游戏服务器</li>
<li>成组处理多个事务的批处理工作负载</li>
</ul>
</li>
<li><p>内存优化型</p>
<p> 提高用于处理内存中的大型数据集的工作负载的性能。</p>
<ul>
<li>高性能数据库</li>
</ul>
</li>
<li><p>加速计算型</p>
<p> 使用硬件加速器或协同处理器来执行一些功能。</p>
<ul>
<li>浮点数计算</li>
<li>图形处理</li>
<li>数据模式匹配</li>
</ul>
</li>
<li><p>存储优化型</p>
<p> 适用于需要对本地存储上的大型数据集进行高速连续读写访问的工作负载。</p>
<ul>
<li>分布式文件系统</li>
<li>数据仓库应用程序</li>
<li>高频在线事务处理系统</li>
</ul>
</li>
</ol>
<h2 id="可扩展性"><a href="#可扩展性" class="headerlink" title="可扩展性"></a>可扩展性</h2><p>可扩展性是指仅从需要的资源开始，并且设计架构以便自动扩展和缩减，从而响应不断变化的需求。</p>
]]></content>
  </entry>
  <entry>
    <title>数据库复习</title>
    <url>/created4u/2023/02/19/DatabaseSystemConceptsChapter0/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><h2 id="Terms"><a href="#Terms" class="headerlink" title="Terms"></a>Terms</h2><ol>
<li>data-management system(DBMS), is a collection of interrelated data and a set of programs to access those data.</li>
<li>database, a collection of data that contains information relevant to an enterprise.</li>
<li>online transaction processing, where a large number of users use the database, with each user retrieving relatively small amounts of data, and performing small updates.</li>
<li>data analytics, the processing of data to draw conclusions, and infer rules or decision procedures, which are then used to drive business decisions.</li>
<li>data inconsistency, the various copies of the same data may no longer agree.</li>
<li>instance of database, the collection of information stored in the database at a particular moment.</li>
<li>database schema, the overall design of the database.</li>
</ol>
<h2 id="Some-Views"><a href="#Some-Views" class="headerlink" title="Some Views"></a>Some Views</h2><h3 id="1-Disadvantages-of-FPS"><a href="#1-Disadvantages-of-FPS" class="headerlink" title="1. Disadvantages of FPS"></a>1. Disadvantages of FPS</h3><ul>
<li>Data redundancy and inconsistency<ul>
<li>same information may be duplicated in several files</li>
<li>the various copies of the same data may no longer agree</li>
</ul>
</li>
<li>Difficulty in accessing data<ul>
<li>conventional file-processing environment do not allow needed data to be retrieved in a convinent and efficient manner</li>
</ul>
</li>
<li>Data isolation<ul>
<li>data are scattered in various files, and files may be in different formats</li>
</ul>
</li>
<li>Integrity problems<ul>
<li>difficult to ensure consistency constraints when constraints invovle several data items from different files</li>
</ul>
</li>
<li>Atomicity problems<ul>
<li>hard to ensure atomicity in a conventional file-processing system</li>
</ul>
</li>
<li>Concurrent-access anomalies</li>
<li>Security problems</li>
</ul>
<h3 id="2-Data-Models"><a href="#2-Data-Models" class="headerlink" title="2. Data Models"></a>2. Data Models</h3><ul>
<li><strong>Relational Models</strong><ul>
<li>a collection of tables to represent both data and the relationships among those data</li>
<li>each table has multiple columns, each column has a <em>unique</em> name</li>
</ul>
</li>
<li><strong>Entity-Relationship Model</strong><ul>
<li>a collection of <em>entities</em>, and relationships among entities</li>
<li>an entity, is a “thing” or “object” in the real world that is <em>distinguishable</em> from other objects</li>
</ul>
</li>
<li><strong>Semi-Structured Data Model</strong><ul>
<li>permits the specification of data where individual data items of the same type may have <em>different sets of attributes</em></li>
<li>widely used in JSON and Extensible Markup Language(XML)</li>
</ul>
</li>
<li><strong>Object-Based Data Model</strong></li>
</ul>
<h3 id="3-Levels-of-Data-Abstraction"><a href="#3-Levels-of-Data-Abstraction" class="headerlink" title="3. Levels of Data Abstraction"></a>3. Levels of Data Abstraction</h3><ul>
<li><strong>Physical Level</strong><ul>
<li>the lowest level</li>
<li><em>how</em> data stored</li>
<li>describles complex low-level data structures in detail</li>
</ul>
</li>
<li><strong>Logical Level</strong><ul>
<li>the middle level</li>
<li><em>what</em> data are stored and <em>what</em> relationships exist among those data</li>
<li>describles the entire database in terms of a small numbers of relatively simple structures</li>
</ul>
</li>
<li><strong>View Level</strong><ul>
<li>the highest level</li>
<li>describles only part of the entire database</li>
</ul>
</li>
</ul>
<h3 id="4-Instance-amp-Schema"><a href="#4-Instance-amp-Schema" class="headerlink" title="4. Instance &amp; Schema"></a>4. Instance &amp; Schema</h3><p>Database systems have several schemas, partitioned according to the levels of the abstraction:</p>
<ul>
<li>Physical Schema</li>
<li>Logical Schema</li>
<li>Subschema</li>
</ul>
<h3 id="5-Database-Languages"><a href="#5-Database-Languages" class="headerlink" title="5. Database Languages"></a>5. Database Languages</h3><h4 id="DDL-Data-Definition-Language"><a href="#DDL-Data-Definition-Language" class="headerlink" title="DDL, Data-Definition Language"></a>DDL, Data-Definition Language</h4><p>DDL is used to specify a database schema and addtional properties of the data.</p>
<h4 id="DML-Data-Manipulation-Language"><a href="#DML-Data-Manipulation-Language" class="headerlink" title="DML, Data-Manipulation Language"></a>DML, Data-Manipulation Language</h4>]]></content>
      <tags>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>Database System Concept</title>
    <url>/created4u/2023/03/09/DatabaseOperations/</url>
    <content><![CDATA[<h1 id="SQL-Basic"><a href="#SQL-Basic" class="headerlink" title="SQL Basic"></a>SQL Basic</h1><p>此教程结合 <a href="https://www.runoob.com/sql/sql-tutorial.html">菜鸟教程</a> 以及 Database System Concepts(7th Edition) 数据库系统概念附带的 <a href="https://www.db-book.com/university-lab-dir/sqljs.html">Online SQL Interpreter</a>，在网站上自己实践效果更好。</p>
<blockquote>
<ol>
<li>SQL 大小写不敏感，以下所有命令都可以采用大写。</li>
<li>有些数据库不加分号 <code>;</code> 也可以，比如 IBM DB2。</li>
</ol>
</blockquote>
<h2 id="select"><a href="#select" class="headerlink" title="select"></a>select</h2><h3 id="format"><a href="#format" class="headerlink" title="format"></a>format</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> TABLE_NAME;</span><br><span class="line"><span class="keyword">select</span> COLUMUN_NAME <span class="keyword">from</span> TABLE_NAME;</span><br></pre></td></tr></table></figure>

<h3 id="e-g"><a href="#e-g" class="headerlink" title="e.g."></a>e.g.</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> classroom;</span><br><span class="line"><span class="keyword">select</span> building <span class="keyword">from</span> classroom;</span><br></pre></td></tr></table></figure>

<h2 id="select-distinct"><a href="#select-distinct" class="headerlink" title="select distinct"></a>select distinct</h2><h3 id="format-1"><a href="#format-1" class="headerlink" title="format"></a>format</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> COLUMN_NAME <span class="keyword">from</span> TABLE_NAME;</span><br></pre></td></tr></table></figure>

<h3 id="e-g-1"><a href="#e-g-1" class="headerlink" title="e.g."></a>e.g.</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> dept_name <span class="keyword">from</span> course;</span><br></pre></td></tr></table></figure>

<h2 id="where"><a href="#where" class="headerlink" title="where"></a>where</h2><h3 id="format-2"><a href="#format-2" class="headerlink" title="format"></a>format</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> COLUMN_NAME <span class="keyword">from</span> TABLE_NAME</span><br><span class="line"><span class="keyword">where</span> COLUMN_NAME operator <span class="keyword">VALUE</span></span><br></pre></td></tr></table></figure>

<h2 id="operator"><a href="#operator" class="headerlink" title="operator"></a>operator</h2><ul>
<li><code>=</code></li>
<li><code>&lt;&gt;</code> 或 <code>!=</code></li>
<li><code>&gt;</code></li>
<li><code>&lt;</code></li>
<li><code>&gt;=</code></li>
<li><code>&lt;=</code></li>
<li><code>between</code></li>
<li><code>like</code></li>
<li><code>in</code></li>
</ul>
<h3 id="e-g-2"><a href="#e-g-2" class="headerlink" title="e.g."></a>e.g.</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> building <span class="keyword">from</span> classroom <span class="keyword">where</span> building<span class="operator">=</span><span class="string">&#x27;Packard&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="and-x2F-or"><a href="#and-x2F-or" class="headerlink" title="and&#x2F;or"></a>and&#x2F;or</h2><h3 id="format-3"><a href="#format-3" class="headerlink" title="format"></a>format</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> COLUMN_NAME <span class="keyword">from</span> TABLE_NAME</span><br><span class="line"><span class="keyword">where</span> CONDITION_ONE <span class="keyword">and</span><span class="operator">/</span><span class="keyword">or</span> CONDITION_TWO;</span><br></pre></td></tr></table></figure>

<h3 id="e-g-3"><a href="#e-g-3" class="headerlink" title="e.g."></a>e.g.</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> course <span class="keyword">where</span> credits<span class="operator">=</span><span class="string">&#x27;3&#x27;</span> <span class="keyword">and</span> dept_name<span class="operator">=</span>&quot;Music&quot;;</span><br></pre></td></tr></table></figure>

<h2 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h2><h3 id="format-4"><a href="#format-4" class="headerlink" title="format"></a>format</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> COLUMN_NAME <span class="keyword">from</span> TABLE_NAME <span class="keyword">order</span> <span class="keyword">by</span> COLUMN_NAME (<span class="keyword">desc</span>);</span><br></pre></td></tr></table></figure>

<h3 id="e-g-4"><a href="#e-g-4" class="headerlink" title="e.g."></a>e.g.</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> classroom <span class="keyword">order</span> <span class="keyword">by</span> building;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> classroom <span class="keyword">order</span> <span class="keyword">by</span> building <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>

<h2 id="insert-into"><a href="#insert-into" class="headerlink" title="insert into"></a>insert into</h2><h3 id="format-5"><a href="#format-5" class="headerlink" title="format"></a>format</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> TABLE_NAME <span class="keyword">values</span>(VALUE_1,VALUE_2,VALUE_3,...);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> TABLE_NAME (COLUMN_1,COLUMN_2,COLUMN_3,...) <span class="keyword">values</span>(VALUE_1,VALUE_2,VALUE_3,...);</span><br></pre></td></tr></table></figure>

<h3 id="e-g-5"><a href="#e-g-5" class="headerlink" title="e.g."></a>e.g.</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> classroom <span class="keyword">values</span>(&quot;Classroom&quot;,&quot;666&quot;,<span class="number">88</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>关于我自己</title>
    <url>/created4u/2023/06/06/about-CN/</url>
    <content><![CDATA[<p>简体中文 | <a href="../about-TCN/index.html">繁體中文</a> | <a href="../about/index.html">English</a> | <a href="../about-FR/index.html">Français</a></p>
<img src="/created4u/2023/06/06/about-CN/code.png" class="" title="Programming is art.">

<h1 id="你好！"><a href="#你好！" class="headerlink" title="你好！"></a>你好！</h1><p>欢迎访问我的个人主页，我也非常荣幸能够同你这样有趣的灵魂在此相遇。</p>
<h1 id="学习经历"><a href="#学习经历" class="headerlink" title="学习经历"></a>学习经历</h1><ul>
<li>2017 - 2020，高中，安徽省亳州市第一中学</li>
<li>2020 - 至今，本科，吉林大学计算机科学与技术学院</li>
</ul>
<h1 id="参与项目"><a href="#参与项目" class="headerlink" title="参与项目"></a>参与项目</h1><ul>
<li>RISC-V 指令集软件仿真</li>
<li>基于 YOLOv5 的智能捡拾机器人</li>
<li>我自己的 Repositories<ul>
<li><a href="https://github.com/created4u/heartbeat.git">Heartbeat</a></li>
<li><a href="https://github.com/created4u/Coursea.git">Coursea</a></li>
</ul>
</li>
</ul>
<h1 id="所获荣誉"><a href="#所获荣誉" class="headerlink" title="所获荣誉"></a>所获荣誉</h1><p>（截止至 2023 年 6 月）</p>
<ul>
<li>2020 - 2021，吉林大学三等奖学金</li>
<li>2021 - 2022，吉林大学二等奖学金</li>
<li>2021 - 2022，吉林大学计算机科学与技术学院院优秀学生</li>
</ul>
<h1 id="兴趣爱好"><a href="#兴趣爱好" class="headerlink" title="兴趣爱好"></a>兴趣爱好</h1><ul>
<li>语言学习。空余时间会学习各种有趣的语言，例如 Français，Русский，Español 等语言。</li>
<li>绘画（约等于～乱画）。没有系统地学过相关知识，就是想画啥画啥。</li>
<li>阅读文学。<a href="https://en.wikipedia.org/wiki/Franz_Kafka">Kafka</a> 和 <a href="https://en.wikipedia.org/wiki/Virginia_Woolf">Woolf</a> 是我最喜欢的作家之一，虽然有时候看不太懂，但是更让我痴迷不已。</li>
<li>设计各种有意思的东西，执着于用平凡的材料创造出不平凡的事物，用颜色表达情感。</li>
<li>摄影。用相机记录下每一个值得回忆的瞬间。</li>
</ul>
<h2 id="我的小作品"><a href="#我的小作品" class="headerlink" title="我的小作品 :)"></a>我的小作品 :)</h2><p>这是几年前我画的第一幅画。</p>
<img src="/created4u/2023/06/06/about-CN/him.PNG" class="" title="The first man I drew.">

<p>这是我家仙人掌开的花。</p>
<img src="/created4u/2023/06/06/about-CN/cactus.jpeg" class="" title="Cactus flower.">]]></content>
      <categories>
        <category>-[about]</category>
      </categories>
  </entry>
  <entry>
    <title>About Me</title>
    <url>/created4u/2023/06/06/about/</url>
    <content><![CDATA[<p>English | <a href="../about-TCN/index.html">繁體中文</a> | <a href="../about-CN/index.html">简体中文</a> | <a href="../about-FR/index.html">Français</a></p>
<img src="/created4u/2023/06/06/about/code.png" class="" title="Programming is art.">

<h1 id="Hello"><a href="#Hello" class="headerlink" title="Hello!"></a>Hello!</h1><p>Welcome to my personal homepage, and I’m glad to meet such an interesting soul as you.</p>
<h1 id="Experience"><a href="#Experience" class="headerlink" title="Experience"></a>Experience</h1><ul>
<li>2017 - 2020, No.1 High School of Bozhou, Anhui Province</li>
<li>2020 - 2024, College of Computer Science and Technology, Jilin University</li>
</ul>
<h1 id="Projects"><a href="#Projects" class="headerlink" title="Projects"></a>Projects</h1><ul>
<li>Emulator based on RISC-V</li>
<li>Intelligent picking robot using YOLOv5</li>
<li>Some repositories<ul>
<li><a href="https://github.com/created4u/heartbeat.git">Heartbeat</a></li>
<li><a href="https://github.com/created4u/Coursea.git">Coursea</a></li>
</ul>
</li>
</ul>
<h1 id="Awards"><a href="#Awards" class="headerlink" title="Awards"></a>Awards</h1><p>(Updated on 6, June, 2023)</p>
<ul>
<li>2020 - 2021, Second Class Scholarship, Jilin University</li>
<li>2021 - 2022, Third Class Scholarship, Jilin University</li>
<li>2021 - 2022, College Excellent Student, Jilin University</li>
</ul>
<h1 id="Hobbies"><a href="#Hobbies" class="headerlink" title="Hobbies"></a>Hobbies</h1><ul>
<li>Learning languages. When I’m free, learning different languages is a wonderful way to consume time, Français, Русский, Español… those are my favorites.</li>
<li>Painting. Just for fun :P.</li>
<li>Reading. <a href="https://en.wikipedia.org/wiki/Franz_Kafka">Kafka</a> and <a href="https://en.wikipedia.org/wiki/Virginia_Woolf">Woolf</a> are among my favorite authors. Although sometimes I don’t fully understand their brilliant work, it makes me even more engrossed.</li>
<li>Design all kinds of interesting things, insist on creating extraordinary things with ordinary materials, and express emotions with colors.</li>
<li>Photography. Recording every moment of normal life with camera.</li>
</ul>
<h2 id="My-Works"><a href="#My-Works" class="headerlink" title="My Works :)"></a>My Works :)</h2><p>Here is the first work I painted several years ago.</p>
<img src="/created4u/2023/06/06/about/him.PNG" class="" title="The first man I drew.">

<p>And this is a flower of cactus in my home.</p>
<img src="/created4u/2023/06/06/about/cactus.jpeg" class="" title="Cactus flower.">]]></content>
      <categories>
        <category>-[about]</category>
      </categories>
  </entry>
  <entry>
    <title>關於我自己</title>
    <url>/created4u/2023/06/06/about-TCN/</url>
    <content><![CDATA[<p>繁體中文 | <a href="../about-CN/index.html">简体中文</a> | <a href="../about/index.html">English</a> | <a href="../about-FR/index.html">Français</a></p>
<img src="/created4u/2023/06/06/about-TCN/code.png" class="" title="Programming is art.">

<h1 id="你好！"><a href="#你好！" class="headerlink" title="你好！"></a>你好！</h1><p>歡迎訪問我嘅個人主頁，我都非常榮幸能夠同你咁有趣嘅靈魂在此相遇。</p>
<h1 id="學習經歷"><a href="#學習經歷" class="headerlink" title="學習經歷"></a>學習經歷</h1><ul>
<li>2017 - 2020，高中，安徽省亳州市第一中學</li>
<li>2020 - 至今，本科，吉林大學計算機科學與技術學院</li>
</ul>
<h1 id="參與項目"><a href="#參與項目" class="headerlink" title="參與項目"></a>參與項目</h1><ul>
<li>RISC-V 指令集軟件仿真</li>
<li>基於 YOLOv5 嘅智能撿拾機械人</li>
<li>我自己嘅 Repositories<ul>
<li><a href="https://github.com/created4u/heartbeat.git">Heartbeat</a></li>
<li><a href="https://github.com/created4u/Coursea.git">Coursea</a></li>
</ul>
</li>
</ul>
<h1 id="所獲榮譽"><a href="#所獲榮譽" class="headerlink" title="所獲榮譽"></a>所獲榮譽</h1><p>（截止至 2023 年 6 月）</p>
<ul>
<li>2020 - 2021，吉林大學三等獎學金</li>
<li>2021 - 2022，吉林大學二等獎學金</li>
<li>2021 - 2022，吉林大學計算機科學與技術學院院優秀學生</li>
</ul>
<h1 id="興趣愛好"><a href="#興趣愛好" class="headerlink" title="興趣愛好"></a>興趣愛好</h1><ul>
<li>語言學習。空餘時間會學習各種有趣嘅語言，例如 Français，Русский，Español 等語言。</li>
<li>繪畫（約等於~亂畫）。冇系統咁學過相關知識，就係想畫啥畫啥。</li>
<li>閱讀文學。<a href="https://en.wikipedia.org/wiki/Franz_Kafka">Kafka</a> 同 <a href="https://en.wikipedia.org/wiki/Virginia_Woolf">Woolf</a> 係我最鍾意嘅作家之一，雖然有時候睇唔係幾明，但係更令我癡迷不已。</li>
<li>設計各種有意思嘅嘢，執著于用平凡嘅材料創造出不平凡嘅嘢，用顏色表達情感。</li>
<li>攝影。用相機記錄的每一個值得回憶嘅瞬間。</li>
</ul>
<h2 id="個人作品"><a href="#個人作品" class="headerlink" title="個人作品 :)"></a>個人作品 :)</h2><p>係幾年前我畫嘅第一幅畫。</p>
<img src="/created4u/2023/06/06/about-TCN/him.PNG" class="" title="The first man I drew.">

<p>係我屋企仙人掌開嘅花。</p>
<img src="/created4u/2023/06/06/about-TCN/cactus.jpeg" class="" title="Cactus flower.">]]></content>
      <categories>
        <category>-[about]</category>
      </categories>
  </entry>
  <entry>
    <title>Présentation de soi.</title>
    <url>/created4u/2023/06/06/about-FR/</url>
    <content><![CDATA[<p>Français | <a href="../about/index.html">English</a> | <a href="../about-TCN/index.html">繁體中文</a> | <a href="../about-CN/index.html">简体中文</a></p>
<img src="/created4u/2023/06/06/about-FR/code.png" class="" title="Programming is art.">

<h1 id="Bonjour"><a href="#Bonjour" class="headerlink" title="Bonjour!"></a>Bonjour!</h1><p>Bienvenue sur ma page d’accueil personnelle, et je suis heureux de rencontrer une âme aussi intéressante que vous.</p>
<h1 id="Experience"><a href="#Experience" class="headerlink" title="Expérience"></a>Expérience</h1><ul>
<li>2017 - 2020, Premier Lycée de Bozhou, Province d’Anhui</li>
<li>2020 - 2024, Collège d’informatique et de technologie, Université de Jilin</li>
</ul>
<h1 id="Projets"><a href="#Projets" class="headerlink" title="Projets"></a>Projets</h1><ul>
<li>Émulateur basé sur RISC-V</li>
<li>Robot de prélèvement intelligent utilisant YOLOv5</li>
<li>Certains  Github Repositories<ul>
<li><a href="https://github.com/created4u/heartbeat.git">Heartbeat</a></li>
<li><a href="https://github.com/created4u/Coursea.git">Coursea</a></li>
</ul>
</li>
</ul>
<h1 id="Recompenses-et-Honneurs"><a href="#Recompenses-et-Honneurs" class="headerlink" title="Récompenses et Honneurs"></a>Récompenses et Honneurs</h1><p>(Mise à jour le 6 juin 2023)</p>
<ul>
<li>2020 - 2021, Bourse de deuxième classe, Université de Jilin</li>
<li>2021 - 2022, Bourse de troisième classe, Université de Jilin</li>
<li>2021 - 2022, Excellent étudiant universitaire, Université de Jilin</li>
</ul>
<h1 id="Loisirs"><a href="#Loisirs" class="headerlink" title="Loisirs"></a>Loisirs</h1><ul>
<li>Apprendre des langues. Quand je suis libre, apprendre différentes langues est une merveilleuse façon de gagner du temps, Français, Русский, Español… ce sont mes préférées.</li>
<li>Peinture. Juste pour le fun :P.</li>
<li>En lisant. <a href="https://en.wikipedia.org/wiki/Franz_Kafka">Kafka</a> et <a href="https://en.wikipedia.org/wiki/Virginia_Woolf">Woolf</a> sont parmi mes auteurs préférés. Bien que parfois je ne comprenne pas entièrement leur travail brillant, cela me rend encore plus captivé.</li>
<li>Concevez toutes sortes de choses intéressantes, insistez pour créer des choses extraordinaires avec des matériaux ordinaires et exprimez des émotions avec des couleurs.</li>
<li>La photographie. Enregistrement de chaque instant de la vie normale avec caméra.</li>
</ul>
<h2 id="Ma-Creation"><a href="#Ma-Creation" class="headerlink" title="Ma Création :)"></a>Ma Création :)</h2><p>Voici la première œuvre que j’ai peinte il y a plusieurs années.</p>
<img src="/created4u/2023/06/06/about-FR/him.PNG" class="" title="The first man I drew.">

<p>Et c’est une fleur de cactus chez moi.</p>
<img src="/created4u/2023/06/06/about-FR/cactus.jpeg" class="" title="Cactus flower.">]]></content>
      <categories>
        <category>-[about]</category>
      </categories>
  </entry>
  <entry>
    <title>C++ 基础回顾</title>
    <url>/created4u/2023/06/21/CppBasic/</url>
    <content><![CDATA[<h1 id="类和面向对象"><a href="#类和面向对象" class="headerlink" title="类和面向对象"></a>类和面向对象</h1><h2 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h2><p>如果一个成员变量被声明为 <code>static</code>，则该类的所有对象均可以访问该变量。如果一个成员函数被声明为 <code>static</code>，则它可以在类的任何实例被定义之前调用。</p>
<p><strong>静态成员变量必须在类中声明，在类外部定义。</strong></p>
<h2 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h2><h2 id="派生"><a href="#派生" class="headerlink" title="派生"></a>派生</h2><h3 id="构造与析构"><a href="#构造与析构" class="headerlink" title="构造与析构"></a>构造与析构</h3><p>派生类对象构造时，先调用基类的构造函数，再调用自身的构造函数。<br>派生类对象析构时，先调用自身的析构函数，再调用基类的析构函数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="built_in">A</span>() &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Hello A&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">A</span>() &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Bye A&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">B</span>: <span class="keyword">public</span> A&#123;</span><br><span class="line">    <span class="built_in">B</span>() &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Hello B&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">B</span>() &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Bye B&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    A a;</span><br><span class="line">    B b;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello A</span><br><span class="line">Hello A</span><br><span class="line">Hello B</span><br><span class="line">Bye B</span><br><span class="line">Bye A</span><br><span class="line">Bye A</span><br></pre></td></tr></table></figure>

<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2>]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>无线网络课程复习</title>
    <url>/created4u/2023/06/21/WirelessNetwork/</url>
    <content><![CDATA[<h1 id="DV-和-DSDV"><a href="#DV-和-DSDV" class="headerlink" title="DV 和 DSDV"></a>DV 和 DSDV</h1><h2 id="DV"><a href="#DV" class="headerlink" title="DV"></a>DV</h2><h2 id="DSDV"><a href="#DSDV" class="headerlink" title="DSDV"></a>DSDV</h2><p>Ref. <a href="https://blog.csdn.net/qq_21324665/article/details/79159080">https://blog.csdn.net/qq_21324665/article/details/79159080</a></p>
<h2 id="按需路由协议"><a href="#按需路由协议" class="headerlink" title="按需路由协议"></a>按需路由协议</h2><blockquote>
<p>为什么没有开销？<br>Route discovery</p>
</blockquote>
<h3 id="DSR"><a href="#DSR" class="headerlink" title="DSR"></a>DSR</h3><p>8 分左右。</p>
<p>Ref. <a href="https://blog.csdn.net/weixin_42982240/article/details/125033059">https://blog.csdn.net/weixin_42982240/article/details/125033059</a></p>
<h3 id="AODV"><a href="#AODV" class="headerlink" title="AODV"></a>AODV</h3><p>Wi-Fi，无线网状网，zi</p>
]]></content>
      <tags>
        <tag>无线网络技术</tag>
      </tags>
  </entry>
  <entry>
    <title>STL 之字符串</title>
    <url>/created4u/2023/06/21/String-STL/</url>
    <content><![CDATA[<h1 id="string"><a href="#string" class="headerlink" title="string"></a>string</h1><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">string <span class="title">s1</span><span class="params">(<span class="string">&quot;Milo_Song_2120&quot;</span>)</span></span>;</span><br><span class="line">    <span class="type">char</span> ch[] = <span class="string">&quot;Hello_Cpp&quot;</span>;</span><br><span class="line">    <span class="function">string <span class="title">s2</span><span class="params">(s1)</span></span>;                       <span class="comment">// 复制字符串</span></span><br><span class="line">    <span class="function">string <span class="title">s3</span><span class="params">(s1, <span class="number">2</span>, <span class="number">5</span>)</span></span>;                 <span class="comment">// 从 s1[2] 开始，复制 5 个字符</span></span><br><span class="line">    <span class="function">string <span class="title">s4</span><span class="params">(ch, <span class="number">4</span>)</span></span>;                    <span class="comment">// 复制 ch 的前 4 个字符</span></span><br><span class="line">    <span class="function">string <span class="title">s5</span><span class="params">(<span class="number">9</span>, <span class="string">&#x27;6&#x27;</span>)</span></span>;                   <span class="comment">// 9 个字符 &#x27;6&#x27;</span></span><br><span class="line">    <span class="function">string <span class="title">s6</span><span class="params">(s1.begin(), s1.end())</span></span>;     <span class="comment">// 复制整个字符串</span></span><br><span class="line">    <span class="function">string <span class="title">s7</span><span class="params">(s1.begin(), s1.end() - <span class="number">1</span>)</span></span>; <span class="comment">// 复制除最后一个字符以外的所有字符</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 = &quot;</span> &lt;&lt; s1 &lt;&lt; <span class="string">&quot;;&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2 = &quot;</span> &lt;&lt; s2 &lt;&lt; <span class="string">&quot;;&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s3 = &quot;</span> &lt;&lt; s3 &lt;&lt; <span class="string">&quot;;&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s4 = &quot;</span> &lt;&lt; s4 &lt;&lt; <span class="string">&quot;;&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s5 = &quot;</span> &lt;&lt; s5 &lt;&lt; <span class="string">&quot;;&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s6 = &quot;</span> &lt;&lt; s6 &lt;&lt; <span class="string">&quot;;&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s7 = &quot;</span> &lt;&lt; s7 &lt;&lt; <span class="string">&quot;;&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s1 = Milo_Song_2120;</span><br><span class="line">s2 = Milo_Song_2120;</span><br><span class="line">s3 = lo_So;</span><br><span class="line">s4 = Hell;</span><br><span class="line">s5 = 666666666;</span><br><span class="line">s6 = Milo_Song_2120;</span><br><span class="line">s7 = Milo_Song_212;</span><br></pre></td></tr></table></figure>

<h2 id="string-的大小和容量"><a href="#string-的大小和容量" class="headerlink" title="string 的大小和容量"></a>string 的大小和容量</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">string <span class="title">s</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Size of s: &quot;</span> &lt;&lt; s.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Length of s: &quot;</span> &lt;&lt; s.<span class="built_in">length</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Max size of s: &quot;</span> &lt;&lt; s.<span class="built_in">max_size</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Capacity of s: &quot;</span> &lt;&lt; s.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line">    s.<span class="built_in">reserve</span>(<span class="number">66</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Capacity of s: &quot;</span> &lt;&lt; s.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Size of s: 5</span><br><span class="line">Length of s: 5</span><br><span class="line">Max size of s: 9223372036854775791</span><br><span class="line">Capacity of s: 22</span><br><span class="line">Capacity of s: 79</span><br></pre></td></tr></table></figure>

<p>⚠️ <code>s.reserve()</code> 和 <code>s.capacity()</code> 这两个函数没搞太懂。</p>
<h2 id="string-读取"><a href="#string-读取" class="headerlink" title="string 读取"></a>string 读取</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">string <span class="title">s</span><span class="params">(<span class="string">&quot;Hello_Song&quot;</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; s.<span class="built_in">at</span>(<span class="number">4</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; s.<span class="built_in">at</span>(s.<span class="built_in">length</span>() - <span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; s[s.<span class="built_in">length</span>()] &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; s[s.<span class="built_in">length</span>() - <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">o</span><br><span class="line">g</span><br><span class="line"> </span><br><span class="line">g</span><br></pre></td></tr></table></figure>

<h2 id="string-比较"><a href="#string-比较" class="headerlink" title="string 比较"></a>string 比较</h2><p><code>compare()</code> 函数</p>
<ul>
<li><code>string1.compare(pos, n, string2)</code></li>
<li>比较结果相同，返回 0 值</li>
<li>比较结果不同<ul>
<li><code>string1</code> 的字典序先于 <code>string2</code>，返回负值</li>
<li>否则，返回正值</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">string <span class="title">s1</span><span class="params">(<span class="string">&quot;abcdef&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">string <span class="title">s2</span><span class="params">(<span class="string">&quot;hijkl&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">string <span class="title">s3</span><span class="params">(<span class="string">&quot;abcdef&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">string <span class="title">s4</span><span class="params">(<span class="string">&quot;abcd&quot;</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; s1.<span class="built_in">compare</span>(s2) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; s1.<span class="built_in">compare</span>(s3) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; s1.<span class="built_in">compare</span>(s4) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; s1.<span class="built_in">compare</span>(<span class="number">0</span>, <span class="number">4</span>, s4);   <span class="comment">//s1 -&gt; abcd 与 s4 比较</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-7</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<p>当然也可以直接使用比较运算符来比较。</p>
<h2 id="string-修改和替换"><a href="#string-修改和替换" class="headerlink" title="string 修改和替换"></a>string 修改和替换</h2><p><code>assign()</code> 和 <code>swap()</code> 函数可以正常使用，但是 <code>erase()</code> 函数出现问题。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">string <span class="title">s1</span><span class="params">(<span class="string">&quot;ABCDEFG&quot;</span>)</span></span>;</span><br><span class="line">    string s2, s3, s4, s5;</span><br><span class="line">    s2.<span class="built_in">assign</span>(s1);</span><br><span class="line">    cout &lt;&lt; s2 &lt;&lt; endl;</span><br><span class="line">    s3.<span class="built_in">assign</span>(s1, <span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">    cout &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line">    s4.<span class="built_in">assign</span>(<span class="number">6</span>, <span class="string">&#x27;X&#x27;</span>);</span><br><span class="line">    cout &lt;&lt; s4 &lt;&lt; endl;</span><br><span class="line">    s5.<span class="built_in">swap</span>(s1);</span><br><span class="line">    cout &lt;&lt; s5 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ABCDEFG</span></span><br><span class="line"><span class="comment">// BCD</span></span><br><span class="line"><span class="comment">// XXXXXX</span></span><br><span class="line"><span class="comment">// ABCDEFG</span></span><br></pre></td></tr></table></figure>

<p><code>insert()</code> 函数的使用如下。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">string <span class="title">s1</span><span class="params">(<span class="string">&quot;ABCDEFG&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">string <span class="title">s2</span><span class="params">(<span class="string">&quot;_Bonjour_&quot;</span>)</span></span>;</span><br><span class="line">    s1.<span class="built_in">insert</span>(<span class="number">1</span>, s2); <span class="comment">// 在 s1 的位置 1 插入 s2</span></span><br><span class="line">    cout &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    s1 = <span class="string">&quot;ABCDEFG&quot;</span>;</span><br><span class="line">    s1.<span class="built_in">insert</span>(<span class="number">2</span>, s2, <span class="number">3</span>); <span class="comment">// 在 s1 的位置 2 插入 s2 位置 3 之后的所有字符</span></span><br><span class="line">    cout &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    s1 = <span class="string">&quot;ABCDEFG&quot;</span>;</span><br><span class="line">    s1.<span class="built_in">insert</span>(<span class="number">2</span>, s2, <span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">    cout &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    s1 = <span class="string">&quot;ABCDEFG&quot;</span>;</span><br><span class="line">    s1.<span class="built_in">insert</span>(<span class="number">0</span>, <span class="number">5</span>, <span class="string">&#x27;6&#x27;</span>);</span><br><span class="line">    cout &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A_Bonjour_BCDEFG</span></span><br><span class="line"><span class="comment">// ABnjour_CDEFG</span></span><br><span class="line"><span class="comment">// ABnjoCDEFG</span></span><br><span class="line"><span class="comment">// 66666ABCDEFG</span></span><br></pre></td></tr></table></figure>

<p><code>append()</code> 函数的使用如下。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">string <span class="title">s1</span><span class="params">(<span class="string">&quot;ABCDEFG&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">string <span class="title">s2</span><span class="params">(<span class="string">&quot;123456&quot;</span>)</span></span>;</span><br><span class="line">    s1.<span class="built_in">append</span>(s2);</span><br><span class="line">    cout &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    s1 = <span class="string">&quot;ABCDEFG&quot;</span>;</span><br><span class="line">    s1.<span class="built_in">append</span>(s2, <span class="number">3</span>);</span><br><span class="line">    cout &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    s1 = <span class="string">&quot;ABCDEFG&quot;</span>;</span><br><span class="line">    s1.<span class="built_in">append</span>(s2, <span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line">    cout &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    s1 = <span class="string">&quot;ABCDEFG&quot;</span>;</span><br><span class="line">    s1.<span class="built_in">append</span>(<span class="number">6</span>, <span class="string">&#x27;6&#x27;</span>);</span><br><span class="line">    cout &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    s1 = <span class="string">&quot;ABCDEFG&quot;</span>;</span><br><span class="line">    s1.<span class="built_in">append</span>(s2.<span class="built_in">begin</span>(), s2.<span class="built_in">end</span>());</span><br><span class="line">    cout &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ABCDEFG_Bonjour_</span></span><br><span class="line"><span class="comment">// ABCDEFGnjour_</span></span><br><span class="line"><span class="comment">// ABCDEFGnj</span></span><br><span class="line"><span class="comment">// ABCDEFG666666</span></span><br><span class="line"><span class="comment">// ABCDEFG_Bonjour_</span></span><br></pre></td></tr></table></figure>

<p><code>replace()</code> 函数的使用如下。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">string <span class="title">s1</span><span class="params">(<span class="string">&quot;ABCDEFG&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">string <span class="title">s2</span><span class="params">(<span class="string">&quot;1234567&quot;</span>)</span></span>;</span><br><span class="line">    s1.<span class="built_in">replace</span>(<span class="number">2</span>, <span class="number">3</span>, s2); <span class="comment">// 使用 s2 替代自 s1 位置 2 开始的 3 个字符</span></span><br><span class="line">    cout &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    s1 = <span class="string">&quot;ABCDEFG&quot;</span>;</span><br><span class="line">    s1.<span class="built_in">replace</span>(<span class="number">2</span>, <span class="number">3</span>, s2, <span class="number">1</span>, <span class="number">4</span>); <span class="comment">// 使用 s2 的子串 &#x27;234&#x27; 替代自 s1 位置 2 开始的 3 个字符</span></span><br><span class="line">    cout &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    s1 = <span class="string">&quot;ABCDEFG&quot;</span>;</span><br><span class="line">    s1.<span class="built_in">replace</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="string">&#x27;6&#x27;</span>);</span><br><span class="line">    cout &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    s1 = <span class="string">&quot;ABCDEFG&quot;</span>;</span><br><span class="line">    s1.<span class="built_in">replace</span>(s1.<span class="built_in">begin</span>(), s1.<span class="built_in">end</span>(), s2);</span><br><span class="line">    cout &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AB1234567FG</span></span><br><span class="line"><span class="comment">// AB2345FG</span></span><br><span class="line"><span class="comment">// AB666666FG</span></span><br><span class="line"><span class="comment">// 1234567</span></span><br></pre></td></tr></table></figure>

<h2 id="string-输入"><a href="#string-输入" class="headerlink" title="string 输入"></a>string 输入</h2><p><code>getline()</code> 函数可以输入整行。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string s1;</span><br><span class="line"><span class="built_in">getline</span>(cin, s1);</span><br><span class="line"><span class="comment">// 下面这个与上面的相同作用</span></span><br><span class="line"><span class="built_in">getline</span>(cin, s1, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"><span class="comment">// 下面这个以空格作为结束标志，例如输入 &#x27;ssss sss&#x27;，实际只能得到 &#x27;ssss&#x27;</span></span><br><span class="line"><span class="built_in">getline</span>(cin, s1, <span class="string">&#x27; &#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="string-查找"><a href="#string-查找" class="headerlink" title="string 查找"></a>string 查找</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">string <span class="title">s1</span><span class="params">(<span class="string">&quot;Hello, nice to meet you.&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">string <span class="title">alphabet</span><span class="params">(<span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; s1.<span class="built_in">find</span>(<span class="string">&#x27;o&#x27;</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; s1.<span class="built_in">find</span>(<span class="string">&#x27;o&#x27;</span>, <span class="number">9</span>) &lt;&lt; endl; <span class="comment">// 从位置 9 开始 find</span></span><br><span class="line">    cout &lt;&lt; s1.<span class="built_in">find</span>(<span class="string">&quot;nice&quot;</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; s1.<span class="built_in">find</span>(<span class="string">&quot;nihao&quot;</span>, <span class="number">0</span>, <span class="number">2</span>) &lt;&lt; endl; <span class="comment">// 在 s1（从位置 0 开始）中查找 &quot;nihao&quot; 的前两个字符</span></span><br><span class="line">    cout &lt;&lt; s1.<span class="built_in">find_first_of</span>(alphabet) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; s1.<span class="built_in">find_last_of</span>(alphabet) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; s1.<span class="built_in">find_first_not_of</span>(alphabet) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; s1.<span class="built_in">find_last_not_of</span>(alphabet) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 13</span></span><br><span class="line"><span class="comment">// 7</span></span><br><span class="line"><span class="comment">// 7</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 22</span></span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 23</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>STL 之容器</title>
    <url>/created4u/2023/06/22/Container-STL/</url>
    <content><![CDATA[<h1 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        vec.<span class="built_in">push_back</span>(i);     <span class="comment">// 添加元素初始化</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;::iterator it; <span class="comment">// 迭代器</span></span><br><span class="line">    <span class="keyword">for</span> (it = vec.<span class="built_in">begin</span>(); it != vec.<span class="built_in">end</span>(); it++)</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>; <span class="comment">// 输出</span></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    vec.<span class="built_in">pop_back</span>(); <span class="comment">// 弹出最后一个元素</span></span><br><span class="line">    <span class="keyword">for</span> (it = vec.<span class="built_in">begin</span>(); it != vec.<span class="built_in">end</span>(); it++)</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>; <span class="comment">// 输出</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"><span class="comment">// 0 1 2 3 4 5 6 7 8</span></span><br></pre></td></tr></table></figure>

<h2 id="大小、容量和遍历"><a href="#大小、容量和遍历" class="headerlink" title="大小、容量和遍历"></a>大小、容量和遍历</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        vec.<span class="built_in">push_back</span>(i); <span class="comment">// 添加元素初始化</span></span><br><span class="line">    <span class="keyword">if</span> (vec.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Vec is empty.\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Vec is not empty.\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;::iterator it; <span class="comment">// 迭代器</span></span><br><span class="line">    <span class="keyword">for</span> (it = vec.<span class="built_in">begin</span>(); it != vec.<span class="built_in">end</span>(); it++)</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>; <span class="comment">// 遍历方式 1</span></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> sizeOfVec = vec.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; sizeOfVec; i++)</span><br><span class="line">        cout &lt;&lt; vec.<span class="built_in">at</span>(i) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl; <span class="comment">// 遍历方式 2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;The size of vec: &quot;</span> &lt;&lt; vec.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;;&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;The capacity of vec: &quot;</span> &lt;&lt; vec.<span class="built_in">capacity</span>() &lt;&lt; <span class="string">&quot;;&quot;</span> &lt;&lt; endl;</span><br><span class="line">    vec.<span class="built_in">resize</span>(<span class="number">30</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;The size of vec: &quot;</span> &lt;&lt; vec.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;;&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;The capacity of vec: &quot;</span> &lt;&lt; vec.<span class="built_in">capacity</span>() &lt;&lt; <span class="string">&quot;;&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Vec is not empty.</span></span><br><span class="line"><span class="comment">// 0 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"><span class="comment">// 0 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"><span class="comment">// The size of vec: 10;</span></span><br><span class="line"><span class="comment">// The capacity of vec: 16;</span></span><br><span class="line"><span class="comment">// The size of vec: 30;</span></span><br><span class="line"><span class="comment">// The capacity of vec: 32;</span></span><br></pre></td></tr></table></figure>

<h2 id="使用算法和自定义函数"><a href="#使用算法和自定义函数" class="headerlink" title="使用算法和自定义函数"></a>使用算法和自定义函数</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">int</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Student</span>(<span class="type">int</span> id, <span class="type">int</span> score) : <span class="built_in">id</span>(id), <span class="built_in">score</span>(score) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">initialize</span><span class="params">(vector&lt;Student&gt; &amp;vec, <span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (num &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">Student <span class="title">temp</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        temp.id = num;</span><br><span class="line">        <span class="type">int</span> i = <span class="built_in">rand</span>() % <span class="number">100</span>;</span><br><span class="line">        temp.score = (i &gt;= <span class="number">80</span>) ? i : i % <span class="number">40</span> + <span class="number">60</span>;</span><br><span class="line">        vec.<span class="built_in">push_back</span>(temp);</span><br><span class="line">        num--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(Student &amp;student)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;ID: &quot;</span> &lt;&lt; student.id &lt;&lt; <span class="string">&quot;, Score: &quot;</span> &lt;&lt; student.score &lt;&lt; <span class="string">&quot;;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">greater90</span><span class="params">(Student &amp;student)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (student.score &gt;= <span class="number">90</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;Student&gt; vec;</span><br><span class="line">    <span class="built_in">initialize</span>(vec, <span class="number">10</span>);</span><br><span class="line">    for_each(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), print); <span class="comment">// 必须包含头文件 &lt;algorithm&gt;</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;And there are &quot;</span> &lt;&lt; <span class="built_in">count_if</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), greater90) &lt;&lt; <span class="string">&quot; students&#x27; score over 90.\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ID: 10, Score: 67;</span></span><br><span class="line"><span class="comment">// ID: 9, Score: 69;</span></span><br><span class="line"><span class="comment">// ID: 8, Score: 93;</span></span><br><span class="line"><span class="comment">// ID: 7, Score: 78;</span></span><br><span class="line"><span class="comment">// ID: 6, Score: 90;</span></span><br><span class="line"><span class="comment">// ID: 5, Score: 92;</span></span><br><span class="line"><span class="comment">// ID: 4, Score: 64;</span></span><br><span class="line"><span class="comment">// ID: 3, Score: 98;</span></span><br><span class="line"><span class="comment">// ID: 2, Score: 83;</span></span><br><span class="line"><span class="comment">// ID: 1, Score: 69;</span></span><br><span class="line"><span class="comment">// And there are 4 students&#x27; score over 90.</span></span><br></pre></td></tr></table></figure>

<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">greater6</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num &gt; <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        vec.<span class="built_in">push_back</span>(<span class="built_in">rand</span>() % <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 访问</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;::iterator it;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;This is vec: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (it = vec.<span class="built_in">begin</span>(); it != vec.<span class="built_in">end</span>(); it++)</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; vec.<span class="built_in">at</span>(<span class="number">1</span>) &lt;&lt; endl;    <span class="comment">// 访问元素</span></span><br><span class="line">    cout &lt;&lt; vec[<span class="number">3</span>] &lt;&lt; endl;       <span class="comment">// 访问元素</span></span><br><span class="line">    vec.<span class="built_in">at</span>(vec.<span class="built_in">size</span>() - <span class="number">1</span>) = <span class="number">100</span>; <span class="comment">// 访问元素并更改</span></span><br><span class="line">    cout &lt;&lt; vec.<span class="built_in">front</span>() &lt;&lt; endl;  <span class="comment">// 访问第一个元素</span></span><br><span class="line">    cout &lt;&lt; vec.<span class="built_in">back</span>() &lt;&lt; endl;   <span class="comment">// 访问最后一个元素</span></span><br><span class="line">    cout &lt;&lt; *vec.<span class="built_in">begin</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; *vec.<span class="built_in">end</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; *vec.<span class="built_in">rbegin</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; *vec.<span class="built_in">rend</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 注意 find 的返回值</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;100 is at the position of &quot;</span> &lt;&lt; <span class="built_in">find</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), <span class="number">100</span>) - vec.<span class="built_in">begin</span>() &lt;&lt; <span class="string">&quot;.\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;No. &quot;</span> &lt;&lt; <span class="built_in">find_if</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), greater6) - vec.<span class="built_in">begin</span>() &lt;&lt; <span class="string">&quot; element in vec is greater than 6.\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 排序</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Sort vec: &quot;</span>;</span><br><span class="line">    std::<span class="built_in">sort</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (it = vec.<span class="built_in">begin</span>(); it != vec.<span class="built_in">end</span>(); it++)</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入</span></span><br><span class="line">    vec.<span class="built_in">push_back</span>(<span class="number">29</span>);           <span class="comment">// 插入到最后</span></span><br><span class="line">    vec.<span class="built_in">insert</span>(vec.<span class="built_in">begin</span>(), <span class="number">99</span>); <span class="comment">// 插入到最前面</span></span><br><span class="line">    <span class="keyword">for</span> (it = vec.<span class="built_in">begin</span>(); it != vec.<span class="built_in">end</span>(); it++)</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    vec.<span class="built_in">insert</span>(vec.<span class="built_in">begin</span>(), <span class="number">2</span>, <span class="number">888</span>); <span class="comment">// 插入 2 个 888 到最前面，注意不是 888 个 2</span></span><br><span class="line">    <span class="keyword">for</span> (it = vec.<span class="built_in">begin</span>(); it != vec.<span class="built_in">end</span>(); it++)</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除</span></span><br><span class="line">    vec.<span class="built_in">pop_back</span>(); <span class="comment">// 弹出最后一个元素</span></span><br><span class="line">    <span class="keyword">for</span> (it = vec.<span class="built_in">begin</span>(); it != vec.<span class="built_in">end</span>(); it++)</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    vec.<span class="built_in">erase</span>(vec.<span class="built_in">begin</span>()); <span class="comment">// 删除第一个元素</span></span><br><span class="line">    <span class="keyword">for</span> (it = vec.<span class="built_in">begin</span>(); it != vec.<span class="built_in">end</span>(); it++)</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    vec.<span class="built_in">erase</span>(vec.<span class="built_in">begin</span>() + <span class="number">3</span>); <span class="comment">// 删除第 4 个元素</span></span><br><span class="line">    <span class="keyword">for</span> (it = vec.<span class="built_in">begin</span>(); it != vec.<span class="built_in">end</span>(); it++)</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    vec.<span class="built_in">clear</span>(); <span class="comment">// 清空</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Clear: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (it = vec.<span class="built_in">begin</span>(); it != vec.<span class="built_in">end</span>(); it++)</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 交换</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec_swap;</span><br><span class="line">    vec_swap.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">    vec.<span class="built_in">swap</span>(vec_swap);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;After swap: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (it = vec.<span class="built_in">begin</span>(); it != vec.<span class="built_in">end</span>(); it++)</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This is vec: 7 49 73 58 30 72 44 78 23</span></span><br><span class="line"><span class="comment">// 49</span></span><br><span class="line"><span class="comment">// 58</span></span><br><span class="line"><span class="comment">// 7</span></span><br><span class="line"><span class="comment">// 100</span></span><br><span class="line"><span class="comment">// 7 0 100 0</span></span><br><span class="line"><span class="comment">// 100 is at the position of 8.</span></span><br><span class="line"><span class="comment">// No. 0 element in vec is greater than 6.</span></span><br><span class="line"><span class="comment">// Sort vec: 7 30 44 49 58 72 73 78 100</span></span><br><span class="line"><span class="comment">// 99 7 30 44 49 58 72 73 78 100 29</span></span><br><span class="line"><span class="comment">// 888 888 99 7 30 44 49 58 72 73 78 100 29</span></span><br><span class="line"><span class="comment">// 888 888 99 7 30 44 49 58 72 73 78 100</span></span><br><span class="line"><span class="comment">// 888 99 7 30 44 49 58 72 73 78 100</span></span><br><span class="line"><span class="comment">// 888 99 7 44 49 58 72 73 78 100</span></span><br><span class="line"><span class="comment">// Clear:</span></span><br><span class="line"><span class="comment">// After swap: 1</span></span><br></pre></td></tr></table></figure>

<h1 id="list"><a href="#list" class="headerlink" title="list"></a>list</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义</span></span><br><span class="line">    list&lt;<span class="type">int</span>&gt; li;</span><br><span class="line">    <span class="function">list&lt;<span class="type">int</span>&gt; <span class="title">li1</span><span class="params">(<span class="number">4</span>)</span></span>;                        <span class="comment">// 定义并确定大小</span></span><br><span class="line">    <span class="function">list&lt;<span class="type">int</span>&gt; <span class="title">li2</span><span class="params">(<span class="number">6</span>, <span class="number">7</span>)</span></span>;                     <span class="comment">// 定义并初始化 6 个 7</span></span><br><span class="line">    <span class="function">list&lt;<span class="type">int</span>&gt; <span class="title">li3</span><span class="params">(li2)</span></span>;                      <span class="comment">// 从别的 list 复制</span></span><br><span class="line">    <span class="function">list&lt;<span class="type">int</span>&gt; <span class="title">li4</span><span class="params">(li2.begin(), --li2.end())</span></span>; <span class="comment">// 从别的 list 复制若干元素</span></span><br><span class="line">    list&lt;<span class="type">int</span>&gt;::iterator it;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;li: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (it = li.<span class="built_in">begin</span>(); it != li.<span class="built_in">end</span>(); it++)</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;li1: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (it = li1.<span class="built_in">begin</span>(); it != li1.<span class="built_in">end</span>(); it++)</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;li2: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (it = li2.<span class="built_in">begin</span>(); it != li2.<span class="built_in">end</span>(); it++)</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;li3: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (it = li3.<span class="built_in">begin</span>(); it != li3.<span class="built_in">end</span>(); it++)</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;li4: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (it = li4.<span class="built_in">begin</span>(); it != li4.<span class="built_in">end</span>(); it++)</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// li:</span></span><br><span class="line"><span class="comment">// li1: 0 0 0 0</span></span><br><span class="line"><span class="comment">// li2: 7 7 7 7 7 7</span></span><br><span class="line"><span class="comment">// li3: 7 7 7 7 7 7</span></span><br><span class="line"><span class="comment">// li4: 7 7 7 7 7</span></span><br></pre></td></tr></table></figure>

<h2 id="基本操作-1"><a href="#基本操作-1" class="headerlink" title="基本操作"></a>基本操作</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">list&lt;<span class="type">int</span>&gt; <span class="title">li</span><span class="params">(<span class="number">6</span>, <span class="number">9</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    list&lt;<span class="type">int</span>&gt;::iterator it;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Original: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (it = li.<span class="built_in">begin</span>(); it != li.<span class="built_in">end</span>(); it++)</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加和删除</span></span><br><span class="line">    li.<span class="built_in">push_front</span>(<span class="number">1</span>);</span><br><span class="line">    li.<span class="built_in">push_back</span>(<span class="number">666</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Add: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (it = li.<span class="built_in">begin</span>(); it != li.<span class="built_in">end</span>(); it++)</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    li.<span class="built_in">pop_back</span>();</span><br><span class="line">    li.<span class="built_in">pop_front</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Remove: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (it = li.<span class="built_in">begin</span>(); it != li.<span class="built_in">end</span>(); it++)</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 大小和容量</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;The size of li: &quot;</span> &lt;&lt; li.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;The max size of li: &quot;</span> &lt;&lt; li.<span class="built_in">max_size</span>() &lt;&lt; endl;</span><br><span class="line">    li.<span class="built_in">resize</span>(<span class="number">100</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;The size of li (after resize): &quot;</span> &lt;&lt; li.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// front and back</span></span><br><span class="line">    li.<span class="built_in">resize</span>(<span class="number">6</span>);</span><br><span class="line">    li.<span class="built_in">push_front</span>(<span class="number">1</span>);</span><br><span class="line">    li.<span class="built_in">push_back</span>(<span class="number">1000</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;front(): &quot;</span> &lt;&lt; li.<span class="built_in">front</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;back(): &quot;</span> &lt;&lt; li.<span class="built_in">back</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改</span></span><br><span class="line">    li.<span class="built_in">reverse</span>(); <span class="comment">// 反序</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Reverse: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (it = li.<span class="built_in">begin</span>(); it != li.<span class="built_in">end</span>(); it++)</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    li.<span class="built_in">assign</span>(<span class="number">4</span>, <span class="number">888</span>); <span class="comment">// 重新赋值</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Assign (li): &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (it = li.<span class="built_in">begin</span>(); it != li.<span class="built_in">end</span>(); it++)</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    list&lt;<span class="type">double</span>&gt; li2;</span><br><span class="line">    list&lt;<span class="type">double</span>&gt;::iterator it2;</span><br><span class="line">    li2.<span class="built_in">assign</span>(li.<span class="built_in">begin</span>(), li.<span class="built_in">end</span>()); <span class="comment">// 用别的 lsit 重新赋值</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Assign (li2): &quot;</span>;</span><br><span class="line">    cout.<span class="built_in">precision</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (it2 = li2.<span class="built_in">begin</span>(); it2 != li2.<span class="built_in">end</span>(); it2++)</span><br><span class="line">        cout &lt;&lt; std::fixed &lt;&lt; *it2 &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Original: 9 9 9 9 9 9</span></span><br><span class="line"><span class="comment">// Add: 1 9 9 9 9 9 9 666</span></span><br><span class="line"><span class="comment">// Remove: 9 9 9 9 9 9</span></span><br><span class="line"><span class="comment">// The size of li: 6</span></span><br><span class="line"><span class="comment">// The max size of li: 768614336404564650</span></span><br><span class="line"><span class="comment">// The size of li (after resize): 100</span></span><br><span class="line"><span class="comment">// front(): 1</span></span><br><span class="line"><span class="comment">// back(): 1000</span></span><br><span class="line"><span class="comment">// Reverse: 1000 9 9 9 9 9 9 1</span></span><br><span class="line"><span class="comment">// Assign (li): 888 888 888 888</span></span><br><span class="line"><span class="comment">// Assign (li2): 888.00 888.00 888.00 888.00</span></span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printOne</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; num &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printAll</span><span class="params">(string name, list&lt;<span class="type">int</span>&gt; &amp;li)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; name &lt;&lt; <span class="string">&quot;: &quot;</span>;</span><br><span class="line">    for_each(li.<span class="built_in">begin</span>(), li.<span class="built_in">end</span>(), printOne);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    list&lt;<span class="type">int</span>&gt; li;</span><br><span class="line">    list&lt;<span class="type">int</span>&gt; li2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        li.<span class="built_in">push_back</span>(<span class="built_in">rand</span>() % <span class="number">100</span>);</span><br><span class="line">        li2.<span class="built_in">push_back</span>(<span class="built_in">rand</span>() % <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printAll</span>(<span class="string">&quot;Original(li)&quot;</span>, li);</span><br><span class="line">    <span class="built_in">printAll</span>(<span class="string">&quot;Original(li2)&quot;</span>, li2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// insert()</span></span><br><span class="line">    li.<span class="built_in">insert</span>(li.<span class="built_in">begin</span>(), <span class="number">999</span>);</span><br><span class="line">    li.<span class="built_in">insert</span>(li.<span class="built_in">end</span>(), <span class="number">3</span>, <span class="number">777</span>);</span><br><span class="line">    <span class="built_in">printAll</span>(<span class="string">&quot;Insert(li)&quot;</span>, li);</span><br><span class="line">    list&lt;<span class="type">int</span>&gt;::iterator it = li2.<span class="built_in">begin</span>();</span><br><span class="line">    it++;</span><br><span class="line">    li2.<span class="built_in">insert</span>(it, <span class="number">3</span>, <span class="number">444</span>);</span><br><span class="line">    <span class="built_in">printAll</span>(<span class="string">&quot;Insert(li2)&quot;</span>, li2);</span><br><span class="line">    li.<span class="built_in">insert</span>(li.<span class="built_in">begin</span>(), li2.<span class="built_in">begin</span>(), li2.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">printAll</span>(<span class="string">&quot;Insert(li)&quot;</span>, li);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// erase()</span></span><br><span class="line">    li.<span class="built_in">erase</span>(li.<span class="built_in">begin</span>());</span><br><span class="line">    <span class="built_in">printAll</span>(<span class="string">&quot;Erase(li)&quot;</span>, li);</span><br><span class="line">    li.<span class="built_in">erase</span>(li.<span class="built_in">begin</span>(), li.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">printAll</span>(<span class="string">&quot;Erase(li)&quot;</span>, li);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// clear()</span></span><br><span class="line">    li2.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="built_in">printAll</span>(<span class="string">&quot;Clear(li2)&quot;</span>, li2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Original(li): 7 73 30 44 23 40 92 87 27 40</span></span><br><span class="line"><span class="comment">// Original(li2): 49 58 72 78 9 65 42 3 29 12</span></span><br><span class="line"><span class="comment">// Insert(li): 999 7 73 30 44 23 40 92 87 27 40 777 777 777</span></span><br><span class="line"><span class="comment">// Insert(li2): 49 444 444 444 58 72 78 9 65 42 3 29 12</span></span><br><span class="line"><span class="comment">// Insert(li): 49 444 444 444 58 72 78 9 65 42 3 29 12 999 7 73 30 44 23 40 92 87 27 40 777 777 777</span></span><br><span class="line"><span class="comment">// Erase(li): 444 444 444 58 72 78 9 65 42 3 29 12 999 7 73 30 44 23 40 92 87 27 40 777 777 777</span></span><br><span class="line"><span class="comment">// Erase(li):</span></span><br><span class="line"><span class="comment">// Clear(li2):</span></span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> &amp;li)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; li &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    list&lt;<span class="type">int</span>&gt; li1, li2;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">10</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        li1.<span class="built_in">push_back</span>(<span class="built_in">rand</span>() % <span class="number">100</span>);</span><br><span class="line">        li2.<span class="built_in">push_back</span>(<span class="built_in">rand</span>() % <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//list&lt;int&gt;::iterator it;</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;li1: &quot;</span> &lt;&lt; endl;</span><br><span class="line">    for_each(li1.<span class="built_in">begin</span>(), li1.<span class="built_in">end</span>(), print);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;li2: &quot;</span> &lt;&lt; endl;</span><br><span class="line">    for_each(li2.<span class="built_in">begin</span>(), li2.<span class="built_in">end</span>(), print);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;li1, sort(), default: &quot;</span> &lt;&lt; endl;</span><br><span class="line">    li1.<span class="built_in">sort</span>();</span><br><span class="line">    for_each(li1.<span class="built_in">begin</span>(), li1.<span class="built_in">end</span>(), print);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;li2, sort(), decrease: &quot;</span> &lt;&lt; endl;</span><br><span class="line">    li2.<span class="built_in">sort</span>(<span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());<span class="comment">//降序排列</span></span><br><span class="line">    for_each(li2.<span class="built_in">begin</span>(), li2.<span class="built_in">end</span>(), print);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;merge li1 and li2: &quot;</span> &lt;&lt; endl;</span><br><span class="line">    li1.<span class="built_in">merge</span>(li2);</span><br><span class="line">    for_each(li1.<span class="built_in">begin</span>(), li1.<span class="built_in">end</span>(), print);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;after merge, li2: &quot;</span> &lt;&lt; endl;</span><br><span class="line">    for_each(li2.<span class="built_in">begin</span>(), li2.<span class="built_in">end</span>(), print);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;li2, add elements: &quot;</span> &lt;&lt; endl;</span><br><span class="line">    li2.<span class="built_in">push_back</span>(<span class="number">999</span>);</span><br><span class="line">    li2.<span class="built_in">push_front</span>(<span class="number">100</span>);</span><br><span class="line">    for_each(li2.<span class="built_in">begin</span>(), li2.<span class="built_in">end</span>(), print);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;li2, remove(): &quot;</span> &lt;&lt; endl;</span><br><span class="line">    li2.<span class="built_in">remove</span>(<span class="number">999</span>);</span><br><span class="line">    for_each(li2.<span class="built_in">begin</span>(), li2.<span class="built_in">end</span>(), print);</span><br><span class="line">    <span class="comment">//li2.remove_if()</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h1><h1 id="set"><a href="#set" class="headerlink" title="set"></a>set</h1><h1 id="multiset"><a href="#multiset" class="headerlink" title="multiset"></a>multiset</h1><h1 id="map"><a href="#map" class="headerlink" title="map"></a>map</h1><h1 id="multimap"><a href="#multimap" class="headerlink" title="multimap"></a>multimap</h1>]]></content>
      <tags>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>基本数据结构 template</title>
    <url>/created4u/2023/06/22/Data-Structure/</url>
    <content><![CDATA[<h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><h2 id="顺序存储"><a href="#顺序存储" class="headerlink" title="顺序存储"></a>顺序存储</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_SIZE 66</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SqList</span> &#123;</span><br><span class="line">    T data[MAX_SIZE];</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListInsert</span><span class="params">(SqList&lt;T&gt; &amp;L, <span class="type">int</span> i, T e)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// i 取值为 1 &lt;= i &lt;= length + 1</span></span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L.length + <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= MAX_SIZE)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = L.length; j &gt;= i; j--)</span><br><span class="line">        L.data[j] = L.data[j - <span class="number">1</span>];</span><br><span class="line">    L.data[i - <span class="number">1</span>] = e;</span><br><span class="line">    L.length++;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListDelete</span><span class="params">(SqList&lt;T&gt; &amp;L, <span class="type">int</span> i, T &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L.length)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    e = L.data[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; L.length; j++)</span><br><span class="line">        L.data[j - <span class="number">1</span>] = L.data[j];</span><br><span class="line">    L.length--;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LocateElem</span><span class="params">(<span class="type">const</span> SqList&lt;T&gt; &amp;L, T &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; L.length; i++)</span><br><span class="line">        <span class="keyword">if</span> (L.data[i] == e)</span><br><span class="line">            <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(<span class="type">const</span> SqList&lt;T&gt; &amp;L)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;This is SqList: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; L.length; i++)</span><br><span class="line">        cout &lt;&lt; L.data[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="链式存储"><a href="#链式存储" class="headerlink" title="链式存储"></a>链式存储</h2>]]></content>
      <tags>
        <tag>C++</tag>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title>无线网络技术</title>
    <url>/created4u/2023/06/22/Wireless-Network-Review/</url>
    <content><![CDATA[<h1 id="英文缩写"><a href="#英文缩写" class="headerlink" title="英文缩写"></a>英文缩写</h1><ul>
<li>ITU, International Telecommunication Union</li>
<li>ISO, International Standards Organization</li>
<li>IEEE, Institute of Electrical and Electronics Engineers</li>
<li>IAB, Internet Architecture Board</li>
<li>IETF, Internet Engineering Task Force</li>
<li>IRTF, Internet Research Task Force</li>
<li>FHSS, Frequency Hopping Spread Spectrum</li>
<li>THSS, Time Hopping Spread Spectrum</li>
<li>DSSS, Direct Sequence Spread Spectrum</li>
<li>ARQ, Automatic Repeat Request</li>
</ul>
<h1 id="无线传输技术"><a href="#无线传输技术" class="headerlink" title="无线传输技术"></a>无线传输技术</h1><h2 id="传输媒体"><a href="#传输媒体" class="headerlink" title="传输媒体"></a>传输媒体</h2><p>数据传输系统中发送器和接收器之间的物理路径。可以分为导向的（如双绞线，同轴电缆，光纤）和非导向的（例如大气）。</p>
<h3 id="3-个重要的电磁波频段"><a href="#3-个重要的电磁波频段" class="headerlink" title="3 个重要的电磁波频段"></a>3 个重要的电磁波频段</h3><ul>
<li>1GHz - 100GHz，微波，可用于点对点传输以及卫星通信</li>
<li>30MHz - 1GHz，无线电广播</li>
<li>$3\times10^{11}$Hz - $2\times10^{14}$Hz，红外，本地应用</li>
</ul>
<h1 id="无线局域网"><a href="#无线局域网" class="headerlink" title="无线局域网"></a>无线局域网</h1>]]></content>
      <tags>
        <tag>Wireless Network</tag>
      </tags>
  </entry>
  <entry>
    <title>Ad hoc 网络路由协议</title>
    <url>/created4u/2023/06/24/ad-hoc-route-protocol/</url>
    <content><![CDATA[<h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><p>自组路由协议</p>
<ul>
<li>扁平路由<ul>
<li>先验式（由表驱动），路由与交通模式无关，包括普通的路由和距离向量路由<ul>
<li>FSR</li>
<li>FSLS</li>
<li>OLSR</li>
<li>TBRPF</li>
</ul>
</li>
<li>反应式（按需模式），需要时才保持路由状态<ul>
<li><strong>AODV</strong></li>
<li><strong>DSR</strong></li>
</ul>
</li>
</ul>
</li>
<li>分级路由，在平面网络中引入层次概念<ul>
<li>HSR</li>
<li>CGSR</li>
<li>ZRP</li>
<li>LANMAR</li>
</ul>
</li>
<li>地理位置协助路由<ul>
<li>GPSR</li>
<li>GeoCast</li>
<li>LAR</li>
<li>DREAM</li>
</ul>
</li>
</ul>
<h1 id="Flooding"><a href="#Flooding" class="headerlink" title="Flooding"></a>Flooding</h1><p>洪泛路由算法（Flood Routing Algorithm）是一种简单而有效的网络路由算法，它用于在没有中央控制的网络中，将数据包从源节点传递到目标节点。该算法的基本原理是在网络中的每个节点接收到数据包后，将数据包向除了发送节点之外的所有相邻节点进行转发，以便数据包能够通过网络传播，直到到达目标节点。</p>
<p>以下是洪泛路由算法的详细介绍：</p>
<ol>
<li><p>初始化：在网络中，每个节点都维护一个路由表，记录了与其相邻的节点信息。开始时，每个节点只知道它直接相连的邻居节点。</p>
</li>
<li><p>发送数据包：当一个节点要发送数据包到目标节点时，它首先检查自己的路由表，找到一个相邻节点作为下一跳，将数据包发送给该节点。</p>
</li>
<li><p>数据包接收和处理：当一个节点接收到数据包时，它<strong>首先检查数据包的目标地址</strong>。如果目标地址是自己，那么该节点就完成了数据包的传递。否则，该节点会检查数据包的源地址，并在路由表中查找下一跳节点。</p>
</li>
<li><p>数据包转发：节点在确定了下一跳节点后，将数据包复制并发送给除了源节点和下一跳节点之外的所有相邻节点。这样，数据包就会在网络中以广播的方式传播。</p>
</li>
<li><p>循环检测：为了防止数据包在网络中无限循环，每个节点都需要维护一个已经接收过的数据包列表。当节点接收到一个数据包时，它会检查列表中是否已经存在相同的数据包。如果是，则丢弃该数据包，以避免循环。</p>
</li>
<li><p>目标节点的确认：当数据包到达目标节点时，目标节点可以通过特定的方式向源节点发送确认消息，通知源节点数据包已经成功到达。</p>
</li>
</ol>
<p>尽管洪泛路由算法具有简单和容错性的优点，但也存在一些问题。其中一个主要问题是网络中的节点数量增加时，数据包的传递路径变得非常复杂，导致网络拥塞和资源浪费。为了解决这个问题，现实世界中的网络通常采用更复杂的路由算法，如距离矢量路由算法（Distance Vector Routing）和链路状态路由算法（Link State Routing），以提高网络效率和性能。</p>
<h1 id="DSR"><a href="#DSR" class="headerlink" title="DSR"></a>DSR</h1><p>DSR（Dynamic Source Routing）路由协议是一种无线自组织网络中的路由协议，适用于移动自组织网络（MANETs）和无线传感器网络（WSNs）。DSR 协议的主要特点是源节点动态地确定数据包的路由路径，而不依赖于中央控制或固定的路由表。</p>
<ol>
<li><p>节点地址</p>
<ul>
<li>每个节点在网络中都有唯一的地址标识。</li>
</ul>
</li>
<li><p>路由发现</p>
<ul>
<li>源节点在发送数据包之前不知道数据包的完整路由路径。</li>
<li>当源节点要发送数据包时，它首先检查自己的路由缓存。如果有目标地址的缓存记录，它可以直接使用该路由。</li>
<li>如果没有缓存记录，源节点将发送一条路由请求（Route Request）消息广播到整个网络中。</li>
</ul>
</li>
<li><p>路由维护</p>
<ul>
<li>当其他节点收到路由请求消息时，如果发现自己是目标节点或者拥有目标节点的缓存路由记录，它将向源节点发送路由回复（Route Reply）消息，其中包含完整的路由路径信息。</li>
<li>源节点接收到路由回复消息后，它就可以构建出数据包的完整路由路径，并将数据包发送到下一跳节点。</li>
<li>中间节点收到数据包后，根据数据包中的路由信息将其转发给下一跳节点，直到数据包到达目标节点。</li>
</ul>
</li>
<li><p>路由维护和更新</p>
<ul>
<li>在数据包传递过程中，每个节点都会维护已经接收到的路由路径，以便在需要时进行路由回复。</li>
<li>如果某个节点发现路由路径发生了变化（如节点移动或网络拓扑改变），它将发送路由错误（Route Error）消息通知网络中的其他节点，以便更新路由表和缓存记录。</li>
</ul>
</li>
<li><p>优点</p>
<ul>
<li>DSR 协议适用于无线自组织网络，特别是移动自组织网络和无线传感器网络，具有很好的适应性和灵活性。</li>
<li>由于路由路径是在数据包传递时动态确定的，因此可以避免中心化的路由控制和静态的路由表维护。</li>
<li>DSR 协议支持多路径路由，可以提高网络的容错性和可靠性。</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li>DSR 协议需要较大的路由请求和回复消息开销，特别是在网络规模较大时。</li>
<li>节点移动频繁或网络拓扑变化剧烈时，路由发现和维护过程可能会引起较高的网络开销和延迟。</li>
<li>DSR 协议没有考虑到网络的负载情况和流量控制，可能导致网络拥塞和资源浪费。</li>
</ul>
</li>
</ol>
<p>总体而言，DSR 路由协议是一种灵活而适应性强的无线自组织网络路由协议，通过动态地确定数据包的路由路径，实现了移动自组织网络中的数据传输和路由发现。然而，在实际应用中，需要综合考虑网络规模、节点移动性、开销和延迟等因素，选择合适的路由协议以满足具体的需求。</p>
<h1 id="AODV"><a href="#AODV" class="headerlink" title="AODV"></a>AODV</h1><p>AODV（Ad hoc On-Demand Distance Vector）路由协议是一种无线自组织网络中的距离向量路由协议，适用于移动自组织网络（MANETs）和无线传感器网络（WSNs）。AODV 协议的设计目标是提供一种有效的路由选择机制，以适应节点的移动性和动态网络拓扑。</p>
<ol>
<li><p>节点地址</p>
<ul>
<li>每个节点在网络中都有唯一的地址标识。</li>
</ul>
</li>
<li><p>路由发现和维护</p>
<ul>
<li>源节点在发送数据包之前不知道数据包的完整路由路径。</li>
<li>当源节点要发送数据包时，它首先检查自己的路由缓存。如果有目标地址的缓存记录，它可以直接使用该路由。</li>
<li>如果没有缓存记录，源节点将发送一条路由请求（Route Request）消息广播到整个网络中。</li>
</ul>
</li>
<li><p>路由请求和回复</p>
<ul>
<li>中间节点收到路由请求消息后，会检查自己的路由表并决定是否能够到达目标节点。</li>
<li>如果中间节点具有到目标节点的有效路由，它将向源节点发送路由回复（Route Reply）消息，其中包含完整的路由路径信息。</li>
<li>如果中间节点无法到达目标节点，它将转发路由请求消息，以便其他节点能够响应。</li>
</ul>
</li>
<li><p>路由表维护</p>
<ul>
<li>每个节点都维护一个路由表，记录了到达其他节点的下一跳节点和跳数等信息。</li>
<li>当节点接收到路由回复消息后，它将更新自己的路由表，并缓存该路由以备将来使用。</li>
<li>路由表中的路由项会根据节点的移动性和网络拓扑的变化而进行动态更新。</li>
</ul>
</li>
<li><p>路由错误处理</p>
<ul>
<li>当节点发现某个路由不再可用（如节点移动或链路中断），它将发送路由错误（Route Error）消息通知网络中的其他节点。</li>
<li>收到路由错误消息的节点会更新自己的路由表，删除无效的路由路径。</li>
</ul>
</li>
<li><p>优点</p>
<ul>
<li>AODV 协议是一种基于需求的路由协议，只在需要时才发起路由请求，减少了网络开销和延迟。</li>
<li>AODV 协议支持适应节点的移动性和动态网络拓扑，能够及时更新路由表并适应变化的网络环境。</li>
<li>AODV 协议具有较好的扩展性，适用于中小规模的无线自组织网络。</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li>AODV 协议在高度移动的网络中可能会产生较高的路由维护开销，尤其是在大规模网络中。</li>
<li>AODV 协议没有考虑到网络的负载情况和流量控制，可能导致网络拥塞和资源浪费。</li>
</ul>
</li>
</ol>
<p>总体而言，AODV 路由协议是一种有效的无线自组织网络路由协议，通过根据需求发起路由请求并动态维护路由表，实现了移动自组织网络中的数据传输和路由发现。然而，在实际应用中，需要综合考虑网络规模、节点移动性、开销和延迟等因素，选择合适的路由协议以满足具体的需求。</p>
<h1 id="LAR"><a href="#LAR" class="headerlink" title="LAR"></a>LAR</h1>]]></content>
      <tags>
        <tag>Wireless Network</tag>
        <tag>ad hoc</tag>
      </tags>
  </entry>
  <entry>
    <title>无线传输技术</title>
    <url>/created4u/2023/06/24/wireless-network-basic/</url>
    <content><![CDATA[<h1 id="无线传输媒体"><a href="#无线传输媒体" class="headerlink" title="无线传输媒体"></a>无线传输媒体</h1><ul>
<li>导向的</li>
<li>非导向的</li>
</ul>
<h2 id="常用频段"><a href="#常用频段" class="headerlink" title="常用频段"></a>常用频段</h2><ul>
<li>1GHz - 100GHz，微波，可用于点对点传输以及卫星通信</li>
<li>30MHz - 1GHz，无线电广播</li>
<li>$3\times10^{11}$Hz - $2\times10^{14}$Hz，红外，本地应用</li>
</ul>
<h2 id="衰减"><a href="#衰减" class="headerlink" title="衰减"></a>衰减</h2><p>微波传输衰减公式</p>
<p>$$L&#x3D;10\lg{\left(\frac{4\pi d}{\lambda}\right)^2}$$</p>
<h1 id="天线"><a href="#天线" class="headerlink" title="天线"></a>天线</h1><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><ul>
<li>偶极天线</li>
<li>抛物反射天线</li>
</ul>
<h2 id="天线增益"><a href="#天线增益" class="headerlink" title="天线增益"></a>天线增益</h2><p>天线增益和有效面积之间的关系</p>
<p>$$G&#x3D;\frac{4\pi A_e}{\lambda^2}&#x3D;\frac{4\pi f^2A_e}{c^2}$$</p>
<ul>
<li>$G$ 为天线的增益</li>
<li>$A_e$ 为天线的有效面积</li>
<li>$f$ 为载波频率</li>
<li>$c$ 为光速</li>
<li>$\lambda$ 为载波波长</li>
</ul>
<h1 id="传播方式"><a href="#传播方式" class="headerlink" title="传播方式"></a>传播方式</h1><ul>
<li>天波传播（&lt;2MHz）</li>
<li>地波传播（2-30MHz）</li>
<li>直线传播（&gt;30MHz）</li>
</ul>
<h1 id="传输损耗"><a href="#传输损耗" class="headerlink" title="传输损耗"></a>传输损耗</h1><ul>
<li>衰减和衰减失真</li>
<li>自由空间损耗</li>
<li>噪声<ul>
<li>热噪声</li>
<li>互调噪声</li>
<li>串扰</li>
<li>脉冲噪声</li>
</ul>
</li>
<li>大气吸收</li>
<li>多径</li>
<li>折射</li>
</ul>
<h1 id="移动环境中的衰退"><a href="#移动环境中的衰退" class="headerlink" title="移动环境中的衰退"></a>移动环境中的衰退</h1><p>衰退类型</p>
<ul>
<li>平面&#x2F;非选择性衰退</li>
<li>选择性衰退</li>
</ul>
<p>差错补偿</p>
<ul>
<li>前向纠错</li>
<li>适应性均衡</li>
<li>分集技术</li>
</ul>
<h1 id="多普勒效应"><a href="#多普勒效应" class="headerlink" title="多普勒效应"></a>多普勒效应</h1><p>在无线电通信中，多普勒效应是指由于移动设备（如移动电话、无人机、雷达等）和基站之间的相对运动而导致信号频率发生变化的现象。这种变化可能会对通信系统的性能和可靠性产生影响，因此需要考虑和处理多普勒效应。</p>
<p>当移动设备和基站之间相对运动时，根据多普勒效应的原理，信号的频率会发生变化。具体而言，如果移动设备向基站靠近，观测者（基站）会感知到信号频率变高，称为正多普勒效应。相反，如果移动设备远离基站，观测者会感知到信号频率变低，称为负多普勒效应。</p>
<p>在无线电通信系统中，多普勒效应的处理是至关重要的，特别是对于高速移动设备或基站的情况。以下是一些常见的处理多普勒效应的方法：</p>
<ol>
<li><p>频率补偿<br>基站可以根据移动设备和基站之间的相对速度，对接收到的信号频率进行补偿。通过测量相对速度并应用适当的频率偏移，可以消除多普勒效应引起的频率偏差，从而保持通信的可靠性。</p>
</li>
<li><p>盲速估计和补偿<br>在某些情况下，移动设备可能无法直接提供其运动信息。此时，基站可以使用盲速估计算法来估计移动设备的相对速度，并相应地对接收到的信号进行频率补偿。</p>
</li>
<li><p>多天线技术<br>多天线技术（如天线阵列）可以通过空间分集和波束成形的方法减轻多普勒效应的影响。通过多路径传播的信号可以从多个方向接收，并在接收端进行合并处理，以降低多普勒效应带来的干扰。</p>
</li>
<li><p>自适应调制<br>自适应调制技术可以根据信道条件的变化，自动调整调制方式和参数。通过根据多普勒效应的影响来选择适当的调制方式，可以提高信号的可靠性和传输效率。</p>
</li>
</ol>
<h1 id="扩频"><a href="#扩频" class="headerlink" title="扩频"></a>扩频</h1><p>扩频技术（Spread Spectrum）是一种在无线通信中广泛应用的技术，它通过将信号在更宽的频带上进行传输，以提高通信的可靠性、抗干扰性和安全性。</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>扩频技术基于信号的频谱扩展原理，通过将原始信号与一个宽带的扩频码进行数学运算，使信号在更大的频带范围内传输。这个扩频码可以是一个伪随机序列，也称为扩频序列或码片。</p>
<h2 id="扩频序列"><a href="#扩频序列" class="headerlink" title="扩频序列"></a>扩频序列</h2><p>扩频序列是一串伪随机的二进制码片序列，其特点是具有较好的互相关性。发送端使用扩频序列将原始数据进行编码，接收端使用相同的扩频序列进行解码，以还原出原始数据。常用的扩频序列包括加法扩频码（例如 N 序列）和乘法扩频码（例如 Gold 码）。</p>
<h2 id="扩频方式"><a href="#扩频方式" class="headerlink" title="扩频方式"></a>扩频方式</h2><ul>
<li>直接序列扩频（Direct Sequence Spread Spectrum，DSSS）：发送端将原始信号与扩频码进行逐位的直接相乘，从而实现频谱的扩展。接收端通过与发送端使用相同的扩频码进行相关运算，将扩展的信号还原为原始信号。</li>
<li>跳频扩频（Frequency Hopping Spread Spectrum，FHSS）：发送端在一个较宽的频带内划分多个子信道，并按照一定的规律，周期性地在这些子信道之间进行切换。接收端需要与发送端保持同步，并按照相同的规律进行频道的切换，以恢复原始信号。</li>
<li>跳时扩频（Time Hopping Spread Spectrum，THSS）基于时间域上的扩频原理，在信号传输过程中，将原始信号分割成短时隙，并根据扩频码的规则进行时隙的跳跃。在每个时隙中，信号以窄带方式传输，并在不同的时隙中通过改变扩频码进行频谱扩展。</li>
<li>脉冲调频。使用调频脉冲进行数据传输，扩频函数控制调频模式。</li>
<li>混合扩频。</li>
</ul>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul>
<li>抗干扰性：扩频技术可以有效抵抗窄带干扰，因为干扰信号只会在整个频带范围内被均匀分布，而且接收端只有在正确的扩频序列下才能还原出原始信号。</li>
<li>安全性：由于扩频码是伪随机的，只有知道正确的扩频序列的接收端才能正确解码，从而实现了一定的安全性。</li>
<li>高可靠性：由于信号在更宽的频带上传输，扩频技术对信道衰落和多径效应具有较好的容忍性，提供了更可靠的通信连接。</li>
</ul>
<p>扩频技术在许多应用中得到广泛应用，包括无线局域网（WLAN）、蓝牙、CDMA 手机通信等。通过扩展信号的频谱，扩频技术提高了通信系统的性能和可靠性，使得无线通信更加稳定和安全。</p>
<h1 id="差错控制"><a href="#差错控制" class="headerlink" title="差错控制"></a>差错控制</h1><h2 id="差错检测码"><a href="#差错检测码" class="headerlink" title="差错检测码"></a>差错检测码</h2><p>差错检测码（Error Detection Code）是一种用于检测数据传输过程中错误的编码技术。它通过在数据中添加冗余位（校验位）来帮助接收方检测传输过程中可能发生的错误。差错检测码广泛应用于计算机网络、通信系统和存储介质等领域，以确保数据的可靠性和完整性。</p>
<ol>
<li><p>奇偶校验（Parity Check）<br>奇偶校验是一种基本的差错检测码。在奇偶校验中，发送方在数据中添加一个奇偶位，使得数据中 1 的个数为奇数（奇校验）或偶数（偶校验）。接收方在接收数据后重新计算奇偶位，并与接收到的校验位进行比较，以检测错误。奇偶校验可以检测到单比特错误，但无法纠正错误。</p>
</li>
<li><p>循环冗余检验（Cyclic Redundancy Check，CRC）<br>CRC 是一种常见的差错检测码，也可以用于纠正错误。CRC 通过除法运算将数据进行多项式编码，并将编码后的冗余校验码添加到数据中。接收方通过再次进行多项式除法运算，并检查接收到的冗余校验码是否匹配，以确定是否有错误发生。CRC 可以检测和纠正多比特错误。</p>
</li>
<li><p>奇偶纠错码（BCH Code）<br>奇偶纠错码是一种用于检测和纠正多比特错误的差错检测码。它在数据中添加冗余位，并使用数学算法来检测和纠正错误。奇偶纠错码可以根据不同的需求和纠错能力进行选择。</p>
</li>
<li><p>校验和（Checksum）<br>校验和是一种简单的差错检测码，常用于网络传输中。发送方将数据分成较小的块，对每个块计算校验和，并将校验和添加到数据中。接收方在接收到数据后，再次计算校验和，并与接收到的校验和进行比较。如果校验和不匹配，则认为数据存在错误。</p>
</li>
</ol>
<p>差错检测码在数据传输过程中起着重要的作用，可以帮助接收方检测传输中的错误。通过选择适当的差错检测码，可以提高数据传输的可靠性，并及时发现和处理错误。</p>
<h2 id="差错纠错码"><a href="#差错纠错码" class="headerlink" title="差错纠错码"></a>差错纠错码</h2><p>差错纠错码（Error Correction Code）是一种用于检测和纠正数据传输中的错误的编码技术。与差错检测码只能检测错误不同，差错纠错码能够在一定范围内检测错误并纠正它们，从而提高数据的可靠性和完整性。</p>
<ol>
<li><p>海明码（Hamming Code）<br>海明码是一种常用的差错纠错码。它通过在数据中添加冗余位（校验位）来纠正错误。海明码使用特定的编码规则，在数据中插入校验位，使得校验位与数据中的比特按照一定规则进行排列。接收方通过比较接收到的数据和校验位，可以检测并纠正单比特错误。海明码可以纠正单比特错误，并检测多比特错误。</p>
</li>
<li><p>重复编码<br>重复编码是一种简单的差错纠错码方法。发送方将每个比特重复发送多次，接收方通过多次接收并比较来检测和纠正错误。例如，将每个比特发送三次，如果接收到的比特中有两个或三个相同，则接收方将判断为正确。重复编码可以纠正少量的比特错误，但会增加传输的开销。</p>
</li>
<li><p>BCH 码（Bose-Chaudhuri-Hocquenghem Code）<br>BCH 码是一类常见的差错纠错码，用于纠正多比特错误。BCH 码根据所需的纠错能力和数据长度选择不同的参数。它利用数学算法将数据进行编码，并在接收方使用纠错算法对接收到的数据进行解码和纠正。BCH 码能够纠正多比特错误，具有较高的纠错能力。</p>
</li>
<li><p>RS 码（Reed-Solomon Code）<br>RS 码是一种常用的差错纠错码，被广泛应用于数据存储和通信系统中。RS 码使用多项式运算来进行编码和解码，具有强大的纠错能力。它可以纠正多比特错误，包括突发错误和随机错误。</p>
</li>
</ol>
<p>差错纠错码通过添加冗余位和利用纠错算法来提供数据纠正能力。它们在数据通信中起着重要的作用，可以检测和纠正传输过程中的错误，提高数据的可靠性和完整性。选择适当的差错纠错码取决于纠错能力要求和系统的特定需求。</p>
<h2 id="ARQ"><a href="#ARQ" class="headerlink" title="ARQ"></a>ARQ</h2><p>自动重发请求（Automatic Repeat Request，ARQ）是一种差错控制技术，用于在计算机网络中检测和纠正数据传输中的错误。ARQ 通过发送方发送数据包并等待接收方的确认（ACK）来实现错误检测和纠正。</p>
<ol>
<li><p>发送方工作流程：</p>
<ul>
<li>发送数据：发送方将数据分成较小的数据包，并通过网络发送给接收方。</li>
<li>等待确认：发送方等待接收方发送确认（ACK）信号，表示数据包已正确接收。</li>
<li>超时重发：如果发送方在一定时间内未收到确认信号，即发生超时，发送方会假设数据包丢失或损坏，并重新发送相同的数据包。</li>
</ul>
</li>
<li><p>接收方工作流程：</p>
<ul>
<li>接收数据：接收方接收发送方发送的数据包。</li>
<li>校验数据：接收方对接收到的数据包进行校验，以检测是否有错误发生。</li>
<li>发送确认：如果数据包没有错误，接收方发送确认信号（ACK）给发送方。</li>
<li>检测和丢弃重复数据包：接收方检测重复的数据包，并将其丢弃，以防止重复处理。</li>
</ul>
</li>
<li><p>ARQ 的重发机制：</p>
<ul>
<li>确认丢失：如果发送方发送了数据包但未收到确认信号，发送方假设数据包丢失，并重新发送相同的数据包。</li>
<li>错误检测：接收方在校验数据包时发现错误，将不发送确认信号，以指示发送方需要重新发送数据包。</li>
<li>超时重发：发送方设置一个超时定时器，如果在规定的时间内未收到确认信号，则认为数据包丢失，并重新发送数据包。</li>
</ul>
</li>
</ol>
<p>ARQ 的优点是能够在数据传输过程中检测和纠正错误，提高了数据的可靠性。然而，ARQ 的缺点是增加了网络的延迟和带宽开销，因为需要重复发送数据包和等待确认信号。</p>
<p>在 ARQ 中，还存在多种变体，如停止等待 ARQ 和连续 ARQ。停止等待 ARQ 是一种简单的 ARQ 方法，发送方在发送数据包后，等待接收到确认信号后才发送下一个数据包。连续 ARQ 是一种更高效的 ARQ 方法，允许发送方连续发送多个数据包，而无需等待每个数据包的确认信号。</p>
]]></content>
      <tags>
        <tag>Wireless Network</tag>
      </tags>
  </entry>
  <entry>
    <title>WLAN</title>
    <url>/created4u/2023/06/24/wireless-network-wlan/</url>
    <content><![CDATA[<h1 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h1><ul>
<li>站 Station, STA<ul>
<li>终端用户设备</li>
<li>无线网络接口</li>
<li>网络软件</li>
</ul>
</li>
<li>无线介质 Wireless Medium, VM</li>
<li>基站&#x2F;接入点 Base Station, BS &#x2F; Access Point, AP</li>
<li>分布式系统 Distribution System, DS</li>
</ul>
<h1 id="拓扑结构"><a href="#拓扑结构" class="headerlink" title="拓扑结构"></a>拓扑结构</h1><ul>
<li>分布对等式拓扑</li>
<li>基础结构集中式拓扑</li>
<li>ESS 网络拓扑</li>
<li>中继或桥接型网络拓扑</li>
</ul>
<h1 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h1><ul>
<li>STA 服务 SS</li>
<li>分布式系统服务 DSS</li>
</ul>
]]></content>
      <tags>
        <tag>Wireless Network</tag>
        <tag>WLAN</tag>
      </tags>
  </entry>
  <entry>
    <title>wireless-network-conclusion</title>
    <url>/created4u/2023/06/25/wireless-network-conclusion/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
