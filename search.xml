<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AWS Notes</title>
    <url>/created4u/2022/12/23/AWSCloudPractionerEssential/</url>
    <content><![CDATA[<h1 id="云计算"><a href="#云计算" class="headerlink" title="云计算"></a>云计算</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>云计算就是通过互联网<strong>按需提供</strong> IT 资源并采用<strong>按需付费</strong>定价模式。</p>
<h2 id="部署模式"><a href="#部署模式" class="headerlink" title="部署模式"></a>部署模式</h2><ul>
<li>云端部署<ul>
<li>在云中运行应用程序的所有组件</li>
<li>将现有应用程序迁移到云</li>
<li>在云中设计和构建新的应用程序</li>
</ul>
</li>
<li>本地部署/私有云部署<ul>
<li>利用虚拟化工具和资源管理工具部署资源</li>
<li>利用应用程序和虚拟化技术提高资源利用率</li>
</ul>
</li>
<li>混合部署<ul>
<li>将基于云的资源与本地基础设施连接</li>
<li>将基于云的资源与传统 IT 应用程序集成</li>
</ul>
</li>
</ul>
<h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ol>
<li><p>将前期费用变成可变支出</p>
<p> 前期费用是指您在使用数据中心、物理服务器和其他资源之前需要为其投入的费用。可变支出意味着您只需为消耗的计算资源付费，而不需要在知道自己会如何使用数据中心和服务器之前进行大量投资。</p>
</li>
<li><p>无需在数据中心运行和维护方面投入资金</p>
</li>
<li><p>无需猜测容量</p>
</li>
<li><p>实现规模经济效益</p>
</li>
<li><p>提高速度和敏捷性</p>
</li>
<li><p>几分钟内实现全球化部署</p>
</li>
</ol>
<h1 id="EC2"><a href="#EC2" class="headerlink" title="EC2"></a>EC2</h1><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><ol>
<li><p>启动</p>
<p> 为实例选择具有基本配置的模板，包括操作系统，应用程序服务器或应用程序。还要选择实例类型，即实例的具体硬件配置。</p>
</li>
<li><p>连接</p>
</li>
<li><p>使用</p>
</li>
</ol>
<h2 id="实例类型"><a href="#实例类型" class="headerlink" title="实例类型"></a>实例类型</h2><ol>
<li><p>通用型</p>
<p> 实现计算，内存和网络资源的均衡。</p>
<ul>
<li>应用程序服务器</li>
<li>游戏服务器</li>
<li>企业应用程序的后端服务器</li>
<li>中小型数据库</li>
</ul>
</li>
<li><p>计算优化型</p>
<p> 适合需要使用高性能处理器的计算密集型应用程序。</p>
<ul>
<li>高性能 Web 服务器</li>
<li>计算密集型应用程序服务器</li>
<li>专用游戏服务器</li>
<li>成组处理多个事务的批处理工作负载</li>
</ul>
</li>
<li><p>内存优化型</p>
<p> 提高用于处理内存中的大型数据集的工作负载的性能。</p>
<ul>
<li>高性能数据库</li>
</ul>
</li>
<li><p>加速计算型</p>
<p> 使用硬件加速器或协同处理器来执行一些功能。</p>
<ul>
<li>浮点数计算</li>
<li>图形处理</li>
<li>数据模式匹配</li>
</ul>
</li>
<li><p>存储优化型</p>
<p> 适用于需要对本地存储上的大型数据集进行高速连续读写访问的工作负载。</p>
<ul>
<li>分布式文件系统</li>
<li>数据仓库应用程序</li>
<li>高频在线事务处理系统</li>
</ul>
</li>
</ol>
<h2 id="可扩展性"><a href="#可扩展性" class="headerlink" title="可扩展性"></a>可扩展性</h2><p>可扩展性是指仅从需要的资源开始，并且设计架构以便自动扩展和缩减，从而响应不断变化的需求。</p>
]]></content>
  </entry>
  <entry>
    <title>C++ 基础回顾</title>
    <url>/created4u/2023/06/21/CppBasic/</url>
    <content><![CDATA[<h1 id="类和面向对象"><a href="#类和面向对象" class="headerlink" title="类和面向对象"></a>类和面向对象</h1><h2 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h2><p>如果一个成员变量被声明为 <code>static</code>，则该类的所有对象均可以访问该变量。如果一个成员函数被声明为 <code>static</code>，则它可以在类的任何实例被定义之前调用。</p>
<p><strong>静态成员变量必须在类中声明，在类外部定义。</strong></p>
<h2 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h2><h2 id="派生"><a href="#派生" class="headerlink" title="派生"></a>派生</h2><h3 id="构造与析构"><a href="#构造与析构" class="headerlink" title="构造与析构"></a>构造与析构</h3><p>派生类对象构造时，先调用基类的构造函数，再调用自身的构造函数。<br>派生类对象析构时，先调用自身的析构函数，再调用基类的析构函数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> {</span><br><span class="line">    <span class="built_in">A</span>() {</span><br><span class="line">        std::cout &lt;&lt; <span class="string">"Hello A"</span> &lt;&lt; std::endl;</span><br><span class="line">    }</span><br><span class="line">    ~<span class="built_in">A</span>() {</span><br><span class="line">        std::cout &lt;&lt; <span class="string">"Bye A"</span> &lt;&lt; std::endl;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">B</span>: <span class="keyword">public</span> A{</span><br><span class="line">    <span class="built_in">B</span>() {</span><br><span class="line">        std::cout &lt;&lt; <span class="string">"Hello B"</span> &lt;&lt; std::endl;</span><br><span class="line">    }</span><br><span class="line">    ~<span class="built_in">B</span>() {</span><br><span class="line">        std::cout &lt;&lt; <span class="string">"Bye B"</span> &lt;&lt; std::endl;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    A a;</span><br><span class="line">    B b;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p>输出结果为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello A</span><br><span class="line">Hello A</span><br><span class="line">Hello B</span><br><span class="line">Bye B</span><br><span class="line">Bye A</span><br><span class="line">Bye A</span><br></pre></td></tr></table></figure>

<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2>]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Database System Concept</title>
    <url>/created4u/2023/03/09/DatabaseOperations/</url>
    <content><![CDATA[<h1 id="SQL-Basic"><a href="#SQL-Basic" class="headerlink" title="SQL Basic"></a>SQL Basic</h1><p>此教程结合 <a href="https://www.runoob.com/sql/sql-tutorial.html">菜鸟教程</a> 以及 Database System Concepts(7th Edition) 数据库系统概念附带的 <a href="https://www.db-book.com/university-lab-dir/sqljs.html">Online SQL Interpreter</a>，在网站上自己实践效果更好。</p>
<blockquote>
<ol>
<li>SQL 大小写不敏感，以下所有命令都可以采用大写。</li>
<li>有些数据库不加分号 <code>;</code> 也可以，比如 IBM DB2。</li>
</ol>
</blockquote>
<h2 id="select"><a href="#select" class="headerlink" title="select"></a>select</h2><h3 id="format"><a href="#format" class="headerlink" title="format"></a>format</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> TABLE_NAME;</span><br><span class="line"><span class="keyword">select</span> COLUMUN_NAME <span class="keyword">from</span> TABLE_NAME;</span><br></pre></td></tr></table></figure>

<h3 id="e-g"><a href="#e-g" class="headerlink" title="e.g."></a>e.g.</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> classroom;</span><br><span class="line"><span class="keyword">select</span> building <span class="keyword">from</span> classroom;</span><br></pre></td></tr></table></figure>

<h2 id="select-distinct"><a href="#select-distinct" class="headerlink" title="select distinct"></a>select distinct</h2><h3 id="format-1"><a href="#format-1" class="headerlink" title="format"></a>format</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> COLUMN_NAME <span class="keyword">from</span> TABLE_NAME;</span><br></pre></td></tr></table></figure>

<h3 id="e-g-1"><a href="#e-g-1" class="headerlink" title="e.g."></a>e.g.</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> dept_name <span class="keyword">from</span> course;</span><br></pre></td></tr></table></figure>

<h2 id="where"><a href="#where" class="headerlink" title="where"></a>where</h2><h3 id="format-2"><a href="#format-2" class="headerlink" title="format"></a>format</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> COLUMN_NAME <span class="keyword">from</span> TABLE_NAME</span><br><span class="line"><span class="keyword">where</span> COLUMN_NAME operator <span class="keyword">VALUE</span></span><br></pre></td></tr></table></figure>

<h2 id="operator"><a href="#operator" class="headerlink" title="operator"></a>operator</h2><ul>
<li><code>=</code></li>
<li><code>&lt;&gt;</code> 或 <code>!=</code></li>
<li><code>&gt;</code></li>
<li><code>&lt;</code></li>
<li><code>&gt;=</code></li>
<li><code>&lt;=</code></li>
<li><code>between</code></li>
<li><code>like</code></li>
<li><code>in</code></li>
</ul>
<h3 id="e-g-2"><a href="#e-g-2" class="headerlink" title="e.g."></a>e.g.</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> building <span class="keyword">from</span> classroom <span class="keyword">where</span> building<span class="operator">=</span><span class="string">'Packard'</span>;</span><br></pre></td></tr></table></figure>

<h2 id="and-x2F-or"><a href="#and-x2F-or" class="headerlink" title="and/or"></a>and/or</h2><h3 id="format-3"><a href="#format-3" class="headerlink" title="format"></a>format</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> COLUMN_NAME <span class="keyword">from</span> TABLE_NAME</span><br><span class="line"><span class="keyword">where</span> CONDITION_ONE <span class="keyword">and</span><span class="operator">/</span><span class="keyword">or</span> CONDITION_TWO;</span><br></pre></td></tr></table></figure>

<h3 id="e-g-3"><a href="#e-g-3" class="headerlink" title="e.g."></a>e.g.</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> course <span class="keyword">where</span> credits<span class="operator">=</span><span class="string">'3'</span> <span class="keyword">and</span> dept_name<span class="operator">=</span>"Music";</span><br></pre></td></tr></table></figure>

<h2 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h2><h3 id="format-4"><a href="#format-4" class="headerlink" title="format"></a>format</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> COLUMN_NAME <span class="keyword">from</span> TABLE_NAME <span class="keyword">order</span> <span class="keyword">by</span> COLUMN_NAME (<span class="keyword">desc</span>);</span><br></pre></td></tr></table></figure>

<h3 id="e-g-4"><a href="#e-g-4" class="headerlink" title="e.g."></a>e.g.</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> classroom <span class="keyword">order</span> <span class="keyword">by</span> building;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> classroom <span class="keyword">order</span> <span class="keyword">by</span> building <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>

<h2 id="insert-into"><a href="#insert-into" class="headerlink" title="insert into"></a>insert into</h2><h3 id="format-5"><a href="#format-5" class="headerlink" title="format"></a>format</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> TABLE_NAME <span class="keyword">values</span>(VALUE_1,VALUE_2,VALUE_3,...);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> TABLE_NAME (COLUMN_1,COLUMN_2,COLUMN_3,...) <span class="keyword">values</span>(VALUE_1,VALUE_2,VALUE_3,...);</span><br></pre></td></tr></table></figure>

<h3 id="e-g-5"><a href="#e-g-5" class="headerlink" title="e.g."></a>e.g.</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> classroom <span class="keyword">values</span>("Classroom","666",<span class="number">88</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>基本数据结构 template</title>
    <url>/created4u/2023/06/22/Data-Structure/</url>
    <content><![CDATA[<h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><h2 id="顺序存储"><a href="#顺序存储" class="headerlink" title="顺序存储"></a>顺序存储</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_SIZE 66</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SqList</span> {</span><br><span class="line">    T data[MAX_SIZE];</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListInsert</span><span class="params">(SqList&lt;T&gt; &amp;L, <span class="type">int</span> i, T e)</span> </span>{</span><br><span class="line">    <span class="comment">// i 取值为 1 &lt;= i &lt;= length + 1</span></span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L.length + <span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= MAX_SIZE)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = L.length; j &gt;= i; j--)</span><br><span class="line">        L.data[j] = L.data[j - <span class="number">1</span>];</span><br><span class="line">    L.data[i - <span class="number">1</span>] = e;</span><br><span class="line">    L.length++;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListDelete</span><span class="params">(SqList&lt;T&gt; &amp;L, <span class="type">int</span> i, T &amp;e)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L.length)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    e = L.data[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; L.length; j++)</span><br><span class="line">        L.data[j - <span class="number">1</span>] = L.data[j];</span><br><span class="line">    L.length--;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LocateElem</span><span class="params">(<span class="type">const</span> SqList&lt;T&gt; &amp;L, T &amp;e)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; L.length; i++)</span><br><span class="line">        <span class="keyword">if</span> (L.data[i] == e)</span><br><span class="line">            <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(<span class="type">const</span> SqList&lt;T&gt; &amp;L)</span> </span>{</span><br><span class="line">    cout &lt;&lt; <span class="string">"This is SqList: "</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; L.length; i++)</span><br><span class="line">        cout &lt;&lt; L.data[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h2 id="链式存储"><a href="#链式存储" class="headerlink" title="链式存储"></a>链式存储</h2>]]></content>
      <tags>
        <tag>C++</tag>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库复习</title>
    <url>/created4u/2023/02/19/DatabaseSystemConceptsChapter0/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><h2 id="Terms"><a href="#Terms" class="headerlink" title="Terms"></a>Terms</h2><ol>
<li>data-management system(DBMS), is a collection of interrelated data and a set of programs to access those data.</li>
<li>database, a collection of data that contains information relevant to an enterprise.</li>
<li>online transaction processing, where a large number of users use the database, with each user retrieving relatively small amounts of data, and performing small updates.</li>
<li>data analytics, the processing of data to draw conclusions, and infer rules or decision procedures, which are then used to drive business decisions.</li>
<li>data inconsistency, the various copies of the same data may no longer agree.</li>
<li>instance of database, the collection of information stored in the database at a particular moment.</li>
<li>database schema, the overall design of the database.</li>
</ol>
<h2 id="Some-Views"><a href="#Some-Views" class="headerlink" title="Some Views"></a>Some Views</h2><h3 id="1-Disadvantages-of-FPS"><a href="#1-Disadvantages-of-FPS" class="headerlink" title="1. Disadvantages of FPS"></a>1. Disadvantages of FPS</h3><ul>
<li>Data redundancy and inconsistency<ul>
<li>same information may be duplicated in several files</li>
<li>the various copies of the same data may no longer agree</li>
</ul>
</li>
<li>Difficulty in accessing data<ul>
<li>conventional file-processing environment do not allow needed data to be retrieved in a convinent and efficient manner</li>
</ul>
</li>
<li>Data isolation<ul>
<li>data are scattered in various files, and files may be in different formats</li>
</ul>
</li>
<li>Integrity problems<ul>
<li>difficult to ensure consistency constraints when constraints invovle several data items from different files</li>
</ul>
</li>
<li>Atomicity problems<ul>
<li>hard to ensure atomicity in a conventional file-processing system</li>
</ul>
</li>
<li>Concurrent-access anomalies</li>
<li>Security problems</li>
</ul>
<h3 id="2-Data-Models"><a href="#2-Data-Models" class="headerlink" title="2. Data Models"></a>2. Data Models</h3><ul>
<li><strong>Relational Models</strong><ul>
<li>a collection of tables to represent both data and the relationships among those data</li>
<li>each table has multiple columns, each column has a <em>unique</em> name</li>
</ul>
</li>
<li><strong>Entity-Relationship Model</strong><ul>
<li>a collection of <em>entities</em>, and relationships among entities</li>
<li>an entity, is a “thing” or “object” in the real world that is <em>distinguishable</em> from other objects</li>
</ul>
</li>
<li><strong>Semi-Structured Data Model</strong><ul>
<li>permits the specification of data where individual data items of the same type may have <em>different sets of attributes</em></li>
<li>widely used in JSON and Extensible Markup Language(XML)</li>
</ul>
</li>
<li><strong>Object-Based Data Model</strong></li>
</ul>
<h3 id="3-Levels-of-Data-Abstraction"><a href="#3-Levels-of-Data-Abstraction" class="headerlink" title="3. Levels of Data Abstraction"></a>3. Levels of Data Abstraction</h3><ul>
<li><strong>Physical Level</strong><ul>
<li>the lowest level</li>
<li><em>how</em> data stored</li>
<li>describles complex low-level data structures in detail</li>
</ul>
</li>
<li><strong>Logical Level</strong><ul>
<li>the middle level</li>
<li><em>what</em> data are stored and <em>what</em> relationships exist among those data</li>
<li>describles the entire database in terms of a small numbers of relatively simple structures</li>
</ul>
</li>
<li><strong>View Level</strong><ul>
<li>the highest level</li>
<li>describles only part of the entire database</li>
</ul>
</li>
</ul>
<h3 id="4-Instance-amp-Schema"><a href="#4-Instance-amp-Schema" class="headerlink" title="4. Instance & Schema"></a>4. Instance &amp; Schema</h3><p>Database systems have several schemas, partitioned according to the levels of the abstraction:</p>
<ul>
<li>Physical Schema</li>
<li>Logical Schema</li>
<li>Subschema</li>
</ul>
<h3 id="5-Database-Languages"><a href="#5-Database-Languages" class="headerlink" title="5. Database Languages"></a>5. Database Languages</h3><h4 id="DDL-Data-Definition-Language"><a href="#DDL-Data-Definition-Language" class="headerlink" title="DDL, Data-Definition Language"></a>DDL, Data-Definition Language</h4><p>DDL is used to specify a database schema and addtional properties of the data.</p>
<h4 id="DML-Data-Manipulation-Language"><a href="#DML-Data-Manipulation-Language" class="headerlink" title="DML, Data-Manipulation Language"></a>DML, Data-Manipulation Language</h4>]]></content>
      <tags>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>STL 之容器</title>
    <url>/created4u/2023/06/22/Container-STL/</url>
    <content><![CDATA[<h1 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        vec.<span class="built_in">push_back</span>(i);     <span class="comment">// 添加元素初始化</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;::iterator it; <span class="comment">// 迭代器</span></span><br><span class="line">    <span class="keyword">for</span> (it = vec.<span class="built_in">begin</span>(); it != vec.<span class="built_in">end</span>(); it++)</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">" "</span>; <span class="comment">// 输出</span></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    vec.<span class="built_in">pop_back</span>(); <span class="comment">// 弹出最后一个元素</span></span><br><span class="line">    <span class="keyword">for</span> (it = vec.<span class="built_in">begin</span>(); it != vec.<span class="built_in">end</span>(); it++)</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">" "</span>; <span class="comment">// 输出</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"><span class="comment">// 0 1 2 3 4 5 6 7 8</span></span><br></pre></td></tr></table></figure>

<h2 id="大小、容量和遍历"><a href="#大小、容量和遍历" class="headerlink" title="大小、容量和遍历"></a>大小、容量和遍历</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        vec.<span class="built_in">push_back</span>(i); <span class="comment">// 添加元素初始化</span></span><br><span class="line">    <span class="keyword">if</span> (vec.<span class="built_in">empty</span>())</span><br><span class="line">    {</span><br><span class="line">        cout &lt;&lt; <span class="string">"Vec is empty.\n"</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        cout &lt;&lt; <span class="string">"Vec is not empty.\n"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;::iterator it; <span class="comment">// 迭代器</span></span><br><span class="line">    <span class="keyword">for</span> (it = vec.<span class="built_in">begin</span>(); it != vec.<span class="built_in">end</span>(); it++)</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">" "</span>; <span class="comment">// 遍历方式 1</span></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> sizeOfVec = vec.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; sizeOfVec; i++)</span><br><span class="line">        cout &lt;&lt; vec.<span class="built_in">at</span>(i) &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    cout &lt;&lt; endl; <span class="comment">// 遍历方式 2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">"The size of vec: "</span> &lt;&lt; vec.<span class="built_in">size</span>() &lt;&lt; <span class="string">";"</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">"The capacity of vec: "</span> &lt;&lt; vec.<span class="built_in">capacity</span>() &lt;&lt; <span class="string">";"</span> &lt;&lt; endl;</span><br><span class="line">    vec.<span class="built_in">resize</span>(<span class="number">30</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">"The size of vec: "</span> &lt;&lt; vec.<span class="built_in">size</span>() &lt;&lt; <span class="string">";"</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">"The capacity of vec: "</span> &lt;&lt; vec.<span class="built_in">capacity</span>() &lt;&lt; <span class="string">";"</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// Vec is not empty.</span></span><br><span class="line"><span class="comment">// 0 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"><span class="comment">// 0 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"><span class="comment">// The size of vec: 10;</span></span><br><span class="line"><span class="comment">// The capacity of vec: 16;</span></span><br><span class="line"><span class="comment">// The size of vec: 30;</span></span><br><span class="line"><span class="comment">// The capacity of vec: 32;</span></span><br></pre></td></tr></table></figure>

<h2 id="使用算法和自定义函数"><a href="#使用算法和自定义函数" class="headerlink" title="使用算法和自定义函数"></a>使用算法和自定义函数</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">int</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Student</span>(<span class="type">int</span> id, <span class="type">int</span> score) : <span class="built_in">id</span>(id), <span class="built_in">score</span>(score) {}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">initialize</span><span class="params">(vector&lt;Student&gt; &amp;vec, <span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">while</span> (num &gt; <span class="number">0</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="function">Student <span class="title">temp</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        temp.id = num;</span><br><span class="line">        <span class="type">int</span> i = <span class="built_in">rand</span>() % <span class="number">100</span>;</span><br><span class="line">        temp.score = (i &gt;= <span class="number">80</span>) ? i : i % <span class="number">40</span> + <span class="number">60</span>;</span><br><span class="line">        vec.<span class="built_in">push_back</span>(temp);</span><br><span class="line">        num--;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(Student &amp;student)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    cout &lt;&lt; <span class="string">"ID: "</span> &lt;&lt; student.id &lt;&lt; <span class="string">", Score: "</span> &lt;&lt; student.score &lt;&lt; <span class="string">";\n"</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">greater90</span><span class="params">(Student &amp;student)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (student.score &gt;= <span class="number">90</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    vector&lt;Student&gt; vec;</span><br><span class="line">    <span class="built_in">initialize</span>(vec, <span class="number">10</span>);</span><br><span class="line">    for_each(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), print); <span class="comment">// 必须包含头文件 &lt;algorithm&gt;</span></span><br><span class="line">    cout &lt;&lt; <span class="string">"And there are "</span> &lt;&lt; <span class="built_in">count_if</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), greater90) &lt;&lt; <span class="string">" students' score over 90.\n"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// ID: 10, Score: 67;</span></span><br><span class="line"><span class="comment">// ID: 9, Score: 69;</span></span><br><span class="line"><span class="comment">// ID: 8, Score: 93;</span></span><br><span class="line"><span class="comment">// ID: 7, Score: 78;</span></span><br><span class="line"><span class="comment">// ID: 6, Score: 90;</span></span><br><span class="line"><span class="comment">// ID: 5, Score: 92;</span></span><br><span class="line"><span class="comment">// ID: 4, Score: 64;</span></span><br><span class="line"><span class="comment">// ID: 3, Score: 98;</span></span><br><span class="line"><span class="comment">// ID: 2, Score: 83;</span></span><br><span class="line"><span class="comment">// ID: 1, Score: 69;</span></span><br><span class="line"><span class="comment">// And there are 4 students' score over 90.</span></span><br></pre></td></tr></table></figure>

<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">greater6</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;num)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> num &gt; <span class="number">6</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        vec.<span class="built_in">push_back</span>(<span class="built_in">rand</span>() % <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 访问</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;::iterator it;</span><br><span class="line">    cout &lt;&lt; <span class="string">"This is vec: "</span>;</span><br><span class="line">    <span class="keyword">for</span> (it = vec.<span class="built_in">begin</span>(); it != vec.<span class="built_in">end</span>(); it++)</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; vec.<span class="built_in">at</span>(<span class="number">1</span>) &lt;&lt; endl;    <span class="comment">// 访问元素</span></span><br><span class="line">    cout &lt;&lt; vec[<span class="number">3</span>] &lt;&lt; endl;       <span class="comment">// 访问元素</span></span><br><span class="line">    vec.<span class="built_in">at</span>(vec.<span class="built_in">size</span>() - <span class="number">1</span>) = <span class="number">100</span>; <span class="comment">// 访问元素并更改</span></span><br><span class="line">    cout &lt;&lt; vec.<span class="built_in">front</span>() &lt;&lt; endl;  <span class="comment">// 访问第一个元素</span></span><br><span class="line">    cout &lt;&lt; vec.<span class="built_in">back</span>() &lt;&lt; endl;   <span class="comment">// 访问最后一个元素</span></span><br><span class="line">    cout &lt;&lt; *vec.<span class="built_in">begin</span>() &lt;&lt; <span class="string">" "</span> &lt;&lt; *vec.<span class="built_in">end</span>() &lt;&lt; <span class="string">" "</span> &lt;&lt; *vec.<span class="built_in">rbegin</span>() &lt;&lt; <span class="string">" "</span> &lt;&lt; *vec.<span class="built_in">rend</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 注意 find 的返回值</span></span><br><span class="line">    cout &lt;&lt; <span class="string">"100 is at the position of "</span> &lt;&lt; <span class="built_in">find</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), <span class="number">100</span>) - vec.<span class="built_in">begin</span>() &lt;&lt; <span class="string">".\n"</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">"No. "</span> &lt;&lt; <span class="built_in">find_if</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), greater6) - vec.<span class="built_in">begin</span>() &lt;&lt; <span class="string">" element in vec is greater than 6.\n"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 排序</span></span><br><span class="line">    cout &lt;&lt; <span class="string">"Sort vec: "</span>;</span><br><span class="line">    std::<span class="built_in">sort</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (it = vec.<span class="built_in">begin</span>(); it != vec.<span class="built_in">end</span>(); it++)</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入</span></span><br><span class="line">    vec.<span class="built_in">push_back</span>(<span class="number">29</span>);           <span class="comment">// 插入到最后</span></span><br><span class="line">    vec.<span class="built_in">insert</span>(vec.<span class="built_in">begin</span>(), <span class="number">99</span>); <span class="comment">// 插入到最前面</span></span><br><span class="line">    <span class="keyword">for</span> (it = vec.<span class="built_in">begin</span>(); it != vec.<span class="built_in">end</span>(); it++)</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    vec.<span class="built_in">insert</span>(vec.<span class="built_in">begin</span>(), <span class="number">2</span>, <span class="number">888</span>); <span class="comment">// 插入 2 个 888 到最前面，注意不是 888 个 2</span></span><br><span class="line">    <span class="keyword">for</span> (it = vec.<span class="built_in">begin</span>(); it != vec.<span class="built_in">end</span>(); it++)</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除</span></span><br><span class="line">    vec.<span class="built_in">pop_back</span>(); <span class="comment">// 弹出最后一个元素</span></span><br><span class="line">    <span class="keyword">for</span> (it = vec.<span class="built_in">begin</span>(); it != vec.<span class="built_in">end</span>(); it++)</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    vec.<span class="built_in">erase</span>(vec.<span class="built_in">begin</span>()); <span class="comment">// 删除第一个元素</span></span><br><span class="line">    <span class="keyword">for</span> (it = vec.<span class="built_in">begin</span>(); it != vec.<span class="built_in">end</span>(); it++)</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    vec.<span class="built_in">erase</span>(vec.<span class="built_in">begin</span>() + <span class="number">3</span>); <span class="comment">// 删除第 4 个元素</span></span><br><span class="line">    <span class="keyword">for</span> (it = vec.<span class="built_in">begin</span>(); it != vec.<span class="built_in">end</span>(); it++)</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    vec.<span class="built_in">clear</span>(); <span class="comment">// 清空</span></span><br><span class="line">    cout &lt;&lt; <span class="string">"Clear: "</span>;</span><br><span class="line">    <span class="keyword">for</span> (it = vec.<span class="built_in">begin</span>(); it != vec.<span class="built_in">end</span>(); it++)</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 交换</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec_swap;</span><br><span class="line">    vec_swap.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">    vec.<span class="built_in">swap</span>(vec_swap);</span><br><span class="line">    cout &lt;&lt; <span class="string">"After swap: "</span>;</span><br><span class="line">    <span class="keyword">for</span> (it = vec.<span class="built_in">begin</span>(); it != vec.<span class="built_in">end</span>(); it++)</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// This is vec: 7 49 73 58 30 72 44 78 23</span></span><br><span class="line"><span class="comment">// 49</span></span><br><span class="line"><span class="comment">// 58</span></span><br><span class="line"><span class="comment">// 7</span></span><br><span class="line"><span class="comment">// 100</span></span><br><span class="line"><span class="comment">// 7 0 100 0</span></span><br><span class="line"><span class="comment">// 100 is at the position of 8.</span></span><br><span class="line"><span class="comment">// No. 0 element in vec is greater than 6.</span></span><br><span class="line"><span class="comment">// Sort vec: 7 30 44 49 58 72 73 78 100</span></span><br><span class="line"><span class="comment">// 99 7 30 44 49 58 72 73 78 100 29</span></span><br><span class="line"><span class="comment">// 888 888 99 7 30 44 49 58 72 73 78 100 29</span></span><br><span class="line"><span class="comment">// 888 888 99 7 30 44 49 58 72 73 78 100</span></span><br><span class="line"><span class="comment">// 888 99 7 30 44 49 58 72 73 78 100</span></span><br><span class="line"><span class="comment">// 888 99 7 44 49 58 72 73 78 100</span></span><br><span class="line"><span class="comment">// Clear:</span></span><br><span class="line"><span class="comment">// After swap: 1</span></span><br></pre></td></tr></table></figure>

<h1 id="list"><a href="#list" class="headerlink" title="list"></a>list</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义</span></span><br><span class="line">    list&lt;<span class="type">int</span>&gt; li;</span><br><span class="line">    <span class="function">list&lt;<span class="type">int</span>&gt; <span class="title">li1</span><span class="params">(<span class="number">4</span>)</span></span>;                        <span class="comment">// 定义并确定大小</span></span><br><span class="line">    <span class="function">list&lt;<span class="type">int</span>&gt; <span class="title">li2</span><span class="params">(<span class="number">6</span>, <span class="number">7</span>)</span></span>;                     <span class="comment">// 定义并初始化 6 个 7</span></span><br><span class="line">    <span class="function">list&lt;<span class="type">int</span>&gt; <span class="title">li3</span><span class="params">(li2)</span></span>;                      <span class="comment">// 从别的 list 复制</span></span><br><span class="line">    <span class="function">list&lt;<span class="type">int</span>&gt; <span class="title">li4</span><span class="params">(li2.begin(), --li2.end())</span></span>; <span class="comment">// 从别的 list 复制若干元素</span></span><br><span class="line">    list&lt;<span class="type">int</span>&gt;::iterator it;</span><br><span class="line">    cout &lt;&lt; <span class="string">"li: "</span>;</span><br><span class="line">    <span class="keyword">for</span> (it = li.<span class="built_in">begin</span>(); it != li.<span class="built_in">end</span>(); it++)</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">"li1: "</span>;</span><br><span class="line">    <span class="keyword">for</span> (it = li1.<span class="built_in">begin</span>(); it != li1.<span class="built_in">end</span>(); it++)</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">"li2: "</span>;</span><br><span class="line">    <span class="keyword">for</span> (it = li2.<span class="built_in">begin</span>(); it != li2.<span class="built_in">end</span>(); it++)</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">"li3: "</span>;</span><br><span class="line">    <span class="keyword">for</span> (it = li3.<span class="built_in">begin</span>(); it != li3.<span class="built_in">end</span>(); it++)</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">"li4: "</span>;</span><br><span class="line">    <span class="keyword">for</span> (it = li4.<span class="built_in">begin</span>(); it != li4.<span class="built_in">end</span>(); it++)</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// li:</span></span><br><span class="line"><span class="comment">// li1: 0 0 0 0</span></span><br><span class="line"><span class="comment">// li2: 7 7 7 7 7 7</span></span><br><span class="line"><span class="comment">// li3: 7 7 7 7 7 7</span></span><br><span class="line"><span class="comment">// li4: 7 7 7 7 7</span></span><br></pre></td></tr></table></figure>

<h2 id="基本操作-1"><a href="#基本操作-1" class="headerlink" title="基本操作"></a>基本操作</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"></span><br><span class="line">    <span class="function">list&lt;<span class="type">int</span>&gt; <span class="title">li</span><span class="params">(<span class="number">6</span>, <span class="number">9</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    list&lt;<span class="type">int</span>&gt;::iterator it;</span><br><span class="line">    cout &lt;&lt; <span class="string">"Original: "</span>;</span><br><span class="line">    <span class="keyword">for</span> (it = li.<span class="built_in">begin</span>(); it != li.<span class="built_in">end</span>(); it++)</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加和删除</span></span><br><span class="line">    li.<span class="built_in">push_front</span>(<span class="number">1</span>);</span><br><span class="line">    li.<span class="built_in">push_back</span>(<span class="number">666</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">"Add: "</span>;</span><br><span class="line">    <span class="keyword">for</span> (it = li.<span class="built_in">begin</span>(); it != li.<span class="built_in">end</span>(); it++)</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    li.<span class="built_in">pop_back</span>();</span><br><span class="line">    li.<span class="built_in">pop_front</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">"Remove: "</span>;</span><br><span class="line">    <span class="keyword">for</span> (it = li.<span class="built_in">begin</span>(); it != li.<span class="built_in">end</span>(); it++)</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 大小和容量</span></span><br><span class="line">    cout &lt;&lt; <span class="string">"The size of li: "</span> &lt;&lt; li.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">"The max size of li: "</span> &lt;&lt; li.<span class="built_in">max_size</span>() &lt;&lt; endl;</span><br><span class="line">    li.<span class="built_in">resize</span>(<span class="number">100</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">"The size of li (after resize): "</span> &lt;&lt; li.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// front and back</span></span><br><span class="line">    li.<span class="built_in">resize</span>(<span class="number">6</span>);</span><br><span class="line">    li.<span class="built_in">push_front</span>(<span class="number">1</span>);</span><br><span class="line">    li.<span class="built_in">push_back</span>(<span class="number">1000</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">"front(): "</span> &lt;&lt; li.<span class="built_in">front</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">"back(): "</span> &lt;&lt; li.<span class="built_in">back</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改</span></span><br><span class="line">    li.<span class="built_in">reverse</span>(); <span class="comment">// 反序</span></span><br><span class="line">    cout &lt;&lt; <span class="string">"Reverse: "</span>;</span><br><span class="line">    <span class="keyword">for</span> (it = li.<span class="built_in">begin</span>(); it != li.<span class="built_in">end</span>(); it++)</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    li.<span class="built_in">assign</span>(<span class="number">4</span>, <span class="number">888</span>); <span class="comment">// 重新赋值</span></span><br><span class="line">    cout &lt;&lt; <span class="string">"Assign (li): "</span>;</span><br><span class="line">    <span class="keyword">for</span> (it = li.<span class="built_in">begin</span>(); it != li.<span class="built_in">end</span>(); it++)</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    list&lt;<span class="type">double</span>&gt; li2;</span><br><span class="line">    list&lt;<span class="type">double</span>&gt;::iterator it2;</span><br><span class="line">    li2.<span class="built_in">assign</span>(li.<span class="built_in">begin</span>(), li.<span class="built_in">end</span>()); <span class="comment">// 用别的 lsit 重新赋值</span></span><br><span class="line">    cout &lt;&lt; <span class="string">"Assign (li2): "</span>;</span><br><span class="line">    cout.<span class="built_in">precision</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (it2 = li2.<span class="built_in">begin</span>(); it2 != li2.<span class="built_in">end</span>(); it2++)</span><br><span class="line">        cout &lt;&lt; std::fixed &lt;&lt; *it2 &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// Original: 9 9 9 9 9 9</span></span><br><span class="line"><span class="comment">// Add: 1 9 9 9 9 9 9 666</span></span><br><span class="line"><span class="comment">// Remove: 9 9 9 9 9 9</span></span><br><span class="line"><span class="comment">// The size of li: 6</span></span><br><span class="line"><span class="comment">// The max size of li: 768614336404564650</span></span><br><span class="line"><span class="comment">// The size of li (after resize): 100</span></span><br><span class="line"><span class="comment">// front(): 1</span></span><br><span class="line"><span class="comment">// back(): 1000</span></span><br><span class="line"><span class="comment">// Reverse: 1000 9 9 9 9 9 9 1</span></span><br><span class="line"><span class="comment">// Assign (li): 888 888 888 888</span></span><br><span class="line"><span class="comment">// Assign (li2): 888.00 888.00 888.00 888.00</span></span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printOne</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;num)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    cout &lt;&lt; num &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printAll</span><span class="params">(string name, list&lt;<span class="type">int</span>&gt; &amp;li)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    cout &lt;&lt; name &lt;&lt; <span class="string">": "</span>;</span><br><span class="line">    for_each(li.<span class="built_in">begin</span>(), li.<span class="built_in">end</span>(), printOne);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"></span><br><span class="line">    list&lt;<span class="type">int</span>&gt; li;</span><br><span class="line">    list&lt;<span class="type">int</span>&gt; li2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    {</span><br><span class="line">        li.<span class="built_in">push_back</span>(<span class="built_in">rand</span>() % <span class="number">100</span>);</span><br><span class="line">        li2.<span class="built_in">push_back</span>(<span class="built_in">rand</span>() % <span class="number">100</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printAll</span>(<span class="string">"Original(li)"</span>, li);</span><br><span class="line">    <span class="built_in">printAll</span>(<span class="string">"Original(li2)"</span>, li2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// insert()</span></span><br><span class="line">    li.<span class="built_in">insert</span>(li.<span class="built_in">begin</span>(), <span class="number">999</span>);</span><br><span class="line">    li.<span class="built_in">insert</span>(li.<span class="built_in">end</span>(), <span class="number">3</span>, <span class="number">777</span>);</span><br><span class="line">    <span class="built_in">printAll</span>(<span class="string">"Insert(li)"</span>, li);</span><br><span class="line">    list&lt;<span class="type">int</span>&gt;::iterator it = li2.<span class="built_in">begin</span>();</span><br><span class="line">    it++;</span><br><span class="line">    li2.<span class="built_in">insert</span>(it, <span class="number">3</span>, <span class="number">444</span>);</span><br><span class="line">    <span class="built_in">printAll</span>(<span class="string">"Insert(li2)"</span>, li2);</span><br><span class="line">    li.<span class="built_in">insert</span>(li.<span class="built_in">begin</span>(), li2.<span class="built_in">begin</span>(), li2.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">printAll</span>(<span class="string">"Insert(li)"</span>, li);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// erase()</span></span><br><span class="line">    li.<span class="built_in">erase</span>(li.<span class="built_in">begin</span>());</span><br><span class="line">    <span class="built_in">printAll</span>(<span class="string">"Erase(li)"</span>, li);</span><br><span class="line">    li.<span class="built_in">erase</span>(li.<span class="built_in">begin</span>(), li.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">printAll</span>(<span class="string">"Erase(li)"</span>, li);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// clear()</span></span><br><span class="line">    li2.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="built_in">printAll</span>(<span class="string">"Clear(li2)"</span>, li2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// Original(li): 7 73 30 44 23 40 92 87 27 40</span></span><br><span class="line"><span class="comment">// Original(li2): 49 58 72 78 9 65 42 3 29 12</span></span><br><span class="line"><span class="comment">// Insert(li): 999 7 73 30 44 23 40 92 87 27 40 777 777 777</span></span><br><span class="line"><span class="comment">// Insert(li2): 49 444 444 444 58 72 78 9 65 42 3 29 12</span></span><br><span class="line"><span class="comment">// Insert(li): 49 444 444 444 58 72 78 9 65 42 3 29 12 999 7 73 30 44 23 40 92 87 27 40 777 777 777</span></span><br><span class="line"><span class="comment">// Erase(li): 444 444 444 58 72 78 9 65 42 3 29 12 999 7 73 30 44 23 40 92 87 27 40 777 777 777</span></span><br><span class="line"><span class="comment">// Erase(li):</span></span><br><span class="line"><span class="comment">// Clear(li2):</span></span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> &amp;li)</span> </span>{</span><br><span class="line">    cout &lt;&lt; li &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    list&lt;<span class="type">int</span>&gt; li1, li2;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">10</span>; i &gt; <span class="number">0</span>; i--) {</span><br><span class="line">        li1.<span class="built_in">push_back</span>(<span class="built_in">rand</span>() % <span class="number">100</span>);</span><br><span class="line">        li2.<span class="built_in">push_back</span>(<span class="built_in">rand</span>() % <span class="number">100</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//list&lt;int&gt;::iterator it;</span></span><br><span class="line">    cout &lt;&lt; <span class="string">"li1: "</span> &lt;&lt; endl;</span><br><span class="line">    for_each(li1.<span class="built_in">begin</span>(), li1.<span class="built_in">end</span>(), print);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">"li2: "</span> &lt;&lt; endl;</span><br><span class="line">    for_each(li2.<span class="built_in">begin</span>(), li2.<span class="built_in">end</span>(), print);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">"li1, sort(), default: "</span> &lt;&lt; endl;</span><br><span class="line">    li1.<span class="built_in">sort</span>();</span><br><span class="line">    for_each(li1.<span class="built_in">begin</span>(), li1.<span class="built_in">end</span>(), print);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">"li2, sort(), decrease: "</span> &lt;&lt; endl;</span><br><span class="line">    li2.<span class="built_in">sort</span>(<span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());<span class="comment">//降序排列</span></span><br><span class="line">    for_each(li2.<span class="built_in">begin</span>(), li2.<span class="built_in">end</span>(), print);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">"merge li1 and li2: "</span> &lt;&lt; endl;</span><br><span class="line">    li1.<span class="built_in">merge</span>(li2);</span><br><span class="line">    for_each(li1.<span class="built_in">begin</span>(), li1.<span class="built_in">end</span>(), print);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">"after merge, li2: "</span> &lt;&lt; endl;</span><br><span class="line">    for_each(li2.<span class="built_in">begin</span>(), li2.<span class="built_in">end</span>(), print);</span><br><span class="line">    cout &lt;&lt; <span class="string">"li2, add elements: "</span> &lt;&lt; endl;</span><br><span class="line">    li2.<span class="built_in">push_back</span>(<span class="number">999</span>);</span><br><span class="line">    li2.<span class="built_in">push_front</span>(<span class="number">100</span>);</span><br><span class="line">    for_each(li2.<span class="built_in">begin</span>(), li2.<span class="built_in">end</span>(), print);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">"li2, remove(): "</span> &lt;&lt; endl;</span><br><span class="line">    li2.<span class="built_in">remove</span>(<span class="number">999</span>);</span><br><span class="line">    for_each(li2.<span class="built_in">begin</span>(), li2.<span class="built_in">end</span>(), print);</span><br><span class="line">    <span class="comment">//li2.remove_if()</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h1 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h1><h1 id="set"><a href="#set" class="headerlink" title="set"></a>set</h1><h1 id="multiset"><a href="#multiset" class="headerlink" title="multiset"></a>multiset</h1><h1 id="map"><a href="#map" class="headerlink" title="map"></a>map</h1><h1 id="multimap"><a href="#multimap" class="headerlink" title="multimap"></a>multimap</h1>]]></content>
      <tags>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>RouteNet-Fermi, Network Modeling with Graph Neural Networks</title>
    <url>/created4u/2024/03/14/RouteNet-Fermi/</url>
    <content><![CDATA[<p><strong>Authors</strong></p>
<p>Miquel Ferriol-Galmés, Jordi Paillisse, José Suárez-Varela, Krzysztof Rusek, Shihan Xiao, Xiang Shi, Xiangle Cheng, Pere Barlet-Ros, Albert Cabellos-Aparicio</p>
<hr>
<h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>Network models are an essential block of modern networks. For example, they are widely used in network planning and optimization. However, as networks increase in scale and complexity, some models presents limitations, such as the assumption of Markovian traffic in queueing theory models, or the high computational cost of network simulators. Recent advances in machine learning, such as Graph Neural Networks(GNN), are enabling a new generation of network models that are data-driven and can learn complex non-linear behaviours. In this paper, we present RouteNet-Fermi, a custom GNN model that shares the same goal as queuing theory, while being considerably more accurate in the presence of realistic traffic models. The proposed model predicts accurately the delay, jitter, and packet loss of a network. We have tested RouteNet-Fermi in networks of increasing size (up yo 300 nodes), including samples with mixed traffic profiles - e.g., with complex non-Markovian models - and arbitrary routing and queue scheduling configurations. Our experimental results show that RouteNet-Fermi achieves similar accuracy as computationally-expensive packet-level simulators and scales accurately to larger networks. Our model produces delay estimates with a mean relative error of 6.24% when applied to a test dataset of 1,000 examples, including network topologies one order od magnitude larger than those seen during training. Finally, we have also evaluated RouteNet-Fermi with measurements from a physical testbed and packet traces from a real-life network.</p>
<p><strong>Index terms:</strong> Network Modeling, Graph Neural Networks, Queuing Theory</p>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Network modeling is arguably one of the key tools when designing, building, and evaluating computer networks, even since the early days of networking. Network models are used in protocol design, performance evaluation, or network planning, just to cite a few examples. The wo most widespread network modeling techniques are analytical models based on Queuing Theory (QT), and packet-level simulators.</p>
<p>However, the evolution of computer networks especially concerning complexity traffic characteristics, highlights some of the limitations of classical modeling techniques. Despite the tremendous success and widespread usage, some scenarios require more advanced techniques capable of accurately modeling complex traffic characteristics, while scaling to large real-world networks.</p>
<p>Especially, two relevant applications can benefit from advanced network modeling techniques: Network Digital Twins (NDT), and the network optimization tools. Commonly, an NDT is referred to as a virtual replica of a physical network that can accurately mimic its behavior and can make performance predictions for any given input condition (e.g., traffic, topology change, or new routing configuration). In other words, an NDT is an accurate network model that can support a wide range of network configurations and that can accurately model the complex non-linear behaviors behind real-world networks. As a result, NDTs can be used to produce accurate performance predictions, carry out what-if analysis, or perform network optimization by pairing it with an optimization algorithm.</p>
<p>In the context of network optimization, we can only optimize what we can model. Optimization algorithm operate by searching the network configuration space (e.g., to find an alternative routing scheme). For each configuration, a network model is used to estimate the resulting performance to see if it fulfills the optimization goal (e.g., minimize delay). To achieve efficient online optimization, it is essential to have an accurate and fast network model.</p>
<p>State-of-the-art modeling techniques have important limitations in effectively supporting the stringent requirements of current packet-switched networks. Queuing Theory imposes strong assumptions on the packet arrival process (Poisson traffic generation), which often is not sufficient to model real-world networks. Internet traffic has been extensively analyzed in the past two decades, and despite the community has not agreed on universal model, there is consensus that in general aggregated traffic shows strong auto-correlation and a heavy-tail.</p>
<p>Alternatively, packet-level simulators can accurately model networks. However, this comes at a high computational cost. The cost of a simulator depends linearly on the number of packets forwarded, which can be in the range of millions per second on a single 1Gbps link. In consequence, they are slow and impractical when considering large networks with realistic traffic volumes. This also severely limits its applicability to online network optimization, given the hard time constraints of such type of applications.</p>
<p>In this context, Deep Learning (DL) offers an extraordinary set of techniques to build accurate data-driven network models. DL models cam be trained with real data, without making any assumptions about physical networks. This enables building models with unprecedented accuracy by modeling the entire range of non-linear and multidimensional characteristics.</p>
<p>In this paper, we first make a systematic analysis of the performance of DL techniques for network modeling, using classical discrete-event network simulators as baseline. Specifically, we analyse the performance of Multilayer Perceptron-based (MLP), Recurrent Neural Network-based (RNN), and Graph Neural Network-based (GNN) models. We find that classical DL techniques, such as MLPs and RNNs are not practical enough for network modeling as they fail to provide accurate estimates when the network scenario differs from the examples seen during training (e.g., link failure). More recently, GNNs have been proposed as a novel neural network architecture specifically designed to learn over graph-structured data. They have been successfully used in other domains, such as quantum chemistry or logistics. However, in our analysis, we find that standard GNNs do not work well for network modeling and that we need a custom GNN architecture to model computer networks.</p>
<p>As a result, we propose RouteNet-Fermi (RouteNet-F), a GNN architecture for network modeling. RouteNet-F shares the same goals as Queuing Theory. It provides performance estimates (delay, jitter, and packet-loss) on given network scenarios (Figure 1) with remarkable accuracy and speed. The proposed model is not limited to Markovian traffic as Queuing Theory; it supports arbitrary models (including auto-correlated processes) which better represent the properties of real-world traffic. Interestingly, it also overcomes one of the main limitations of DL-based models: RouteNet-F generalises and provides accurate estimates in network scenarios not seen in training (e.g., different topologies, traffic metrics, routing configurations). We benchmark RouteNet-F against a state-of-the-art DL-based model (MimicNet) and with a state-of-the-art queuing theory model. We show that our model outperforms both baselines in all scenarios, achieving a 5.64% error when tested in a dataset with packet traces coming from a real-world network, an 11% error when evaluated in a physical testbed, and a 6.24% error when estimating the delay on networks over a large dataset with 1,000 network examples, with topologies ranging from 50 to 300 nodes.</p>
<p>As any Deep Learning model, RouteNet-Fermi does not provide strong mathematical performance guarantees. However, the error of the estimates produced by the model is strongly bounded. The minimum estimated delay assumes no queuing across the path while the maximum assumes that all the queues are full. RouteNet-Fermi will not produce delay estimates outside these bounds.</p>
<p>The implementation of the model used in the evaluation in this paper is publicly available at <a href="https://github.com/BNN-UPC/Papers/wiki/RouteNet_Fermi">RouteNet-Fermi</a>.</p>
<h2 id="Challenges-of-Data-Driven-Network-Modeling"><a href="#Challenges-of-Data-Driven-Network-Modeling" class="headerlink" title="Challenges of Data-Driven Network Modeling"></a>Challenges of Data-Driven Network Modeling</h2><p>This section describes the main challenges that data-driven solutions need to address for network modeling. These challenges drove the core design of RouteNet-Fermi.</p>
<p><strong>Traffic Models:</strong> Networks carry different types of traffic, so, supporting arbitrary stochastic traffic model is crucial. Experimental observations show that traffic on the Internet has strong auto-correlation and heavy-tails. In this context, it is well-known that main limitation of Queuing Theory is that it fails to provide accurate estimates on realistic Markovian models with continuous state space, or non-Markovian traffic models. The challenge for DL-based modeling is: How can we design a neural network architecture that can accurately model realistic traffic models.</p>
<p><strong>Training and Generalisation:</strong> One of the main differences between analytical modeling (e.g., QT) and data-driven modeling is that the latter requires training. In DL, training involves obtaining a representative dataset of network measurements. The dataset needs to include a broad spectrum of network operational regimes, ranging from different congestion levels to various routing configurations, among others. In other words, the DL model cam predict only scenarios it has previously seen. Note that this is a common property of all neural network architectures.</p>
<p>Ideally, we would obtain this training dataset from a production network, since they commonly have systems in place to measure performance. However, it would be difficult to obtain a representative dataset. As we mentioned previously, we would need to measure the production network when it is experiencing extreme performance degradation as the result of link failures, incorrect configurations, severe congestion, etc. However, these situations are not common in production networks, which limits the ability to generate the training dataset. A reasonable alternative is creating these datasets in controlled testbeds, where it is possible to use different traffic models, implement a broad set of configurations, and replicate a wide range of network failures. Thus, the DL model can be trained on samples from testbed and then, applied to production networks. Hence, the research challenge is: how to design a DL model that can provide accurate estimates in network not seen during training? This incudes topologies, traffic, and configurations (e.g., queuing scheduling, routing) different from those seen in the training network testbed.</p>
<p>Leveraging a testbed that is smaller than a production network creates another challenge: the generalisation to larger networks. Real-world networks include hundreds or thousands of nodes, and building a network testbed at this scale is typically unfeasible. As a result, the Dl model should be able to learn from datasets with samples of small network testbeds and predict metrics for considerably larger networks, e.g., by a factor of 10-100x. Generalising to larger networks, or graphs in general, is currently an open research challenge in the field of GNNs.</p>
<p><strong>Quality of Service and Scheduling Policies:</strong> A key requirement of modern networks is supporting Quality of Service (QoS), usually implemented via scheduling policies and mapping of traffic flows to QoS classes. Hence, a DL model should be able to predict the performance of the input traffic flows with their associated QoS class, similarly to how QT models support a wide range of scheduling policies.</p>
<h2 id="Limitations-of-Current-Network-Modeling-Techniques"><a href="#Limitations-of-Current-Network-Modeling-Techniques" class="headerlink" title="Limitations of Current Network Modeling Techniques"></a>Limitations of Current Network Modeling Techniques</h2><p>This section explores the performance of different DL models with respect to an accurate packet-level simulator and discusses the main limitations of existing network modeling techniques.</p>
<h3 id="A-Simulations-as-Network-Modeling-Technique"><a href="#A-Simulations-as-Network-Modeling-Technique" class="headerlink" title="A. Simulations as Network Modeling Technique"></a>A. Simulations as Network Modeling Technique</h3><p>Network simulators reproduce the network behaviour at the granularity of packet events. This way, they can offer excellent accuracy and can be easily extended to include virtually and feature, such as packet scheduling, wireless networks, etc. Some simulators, such as Omnet++ or ns-3, are widely used and maintained.</p>
<p>However, their main limitation is the simulation time, especially for networks with high-speed links (10Gbps and above). Hence, depending on the amount of the traffic found in the target network, it may become unfeasible to simulate the network.</p>
<p>To illustrate this limitation, we simulate different topologies using the Omnet++ simulator to calculate the delay of a set of source-destination flows (CPU Intel Xeon Silver 4210R @2.40GHz). Network topologies are artificially generated using the Power-Law Out-Degree Algorithm from <a href="https://ieeexplore.ieee.org/abstract/document/892042">this paper</a> and a traffic distribution that follows a Poisson process.</p>
<p>Figure shows the simulation time of such networks depending on the number of events. Here, an event refers to a transition in status of the network (e.g., adding a new packet to queue). We can see that the simulation time increases linearly and that simulating 4 billion events may appear a larger figure, consider that a 10Gbps link transmitting regular Ethernet frames translates to <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="6.961ex" height="1.62ex" role="img" focusable="false" viewBox="0 -694 3076.8 716"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2248" d="M55 319Q55 360 72 393T114 444T163 472T205 482Q207 482 213 482T223 483Q262 483 296 468T393 413L443 381Q502 346 553 346Q609 346 649 375T694 454Q694 465 698 474T708 483Q722 483 722 452Q722 386 675 338T555 289Q514 289 468 310T388 357T308 404T224 426Q164 426 125 393T83 318Q81 289 69 289Q55 289 55 319ZM55 85Q55 126 72 159T114 210T163 238T205 248Q207 248 213 248T223 249Q262 249 296 234T393 179L443 147Q502 112 553 112Q609 112 649 141T694 220Q694 249 708 249T722 217Q722 153 675 104T555 55Q514 55 468 76T388 123T308 170T224 192Q164 192 125 159T83 84Q80 55 69 55Q55 55 55 85Z"></path></g><g data-mml-node="mn" transform="translate(1055.8,0)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g><g data-mml-node="mi" transform="translate(2555.8,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></svg></mjx-container> events per seconds or 247 million events in 5 minutes of network activity for a single link. For example, in our experiments, the simulator takes around 8h to compute the performance metrics of a 300-node network.</p>
<p>So, the main limitation of packet-level simulators is the simulation time. On the contrary, packet simulators offer unrivalled accuracy and can simulate virtually any scenario, from different routing configurations to replaying packet traces to simulate unknown traffic models. Because of this, hereafter, we consider the results from the simulator as the ground truth for the evaluations in this paper.</p>
<h3 id="B-Neural-Networks-as-Network-Modeling-Techniques"><a href="#B-Neural-Networks-as-Network-Modeling-Techniques" class="headerlink" title="B. Neural Networks as Network Modeling Techniques"></a>B. Neural Networks as Network Modeling Techniques</h3><p>The following sections review the performance of three common Neural Network (NN) architectures in the order of increasing complexity. First, we evaluate the Multilayer Perceptron, one of the simplest NNs. Next, Recurrent Neural Networks which are designed to work with sequences. Finally, we directly input the network into a Graph Neural Network specifically designed to work with graphs. The objective is to create a network model with the NN that can predict performance parameters for input networks with a wide range of characteristics. We are especially interested in the following parameters:</p>
<ul>
<li><strong>Accuracy:</strong> How close is the prediction to simulation values?</li>
<li><strong>Different Routing:</strong> Does the accuracy degrade if we change the routing configuration?</li>
<li><strong>Link Failures:</strong> Quantify if link failures affect the quality of predictions?</li>
</ul>
<p>We trained and test the three neural networks with the same dataset, obtained from simulations with Omnet++. The input values are the network characteristics (topology, routing configuration, traffic model and intensity, etc), and the output values are the delay for each path. Hence, all the errors are computed with respect to values of the simulator. We use four different datasets:</p>
<ul>
<li><strong>Traffic Models:</strong> In it, we consider traffic models that are non-Poisson, auto-correlated, and with heavy tails. Table IV details the different traffic models.</li>
<li><strong>Same Routing:</strong> Where the testing and training datasets contain networks with the same routing configurations.</li>
<li><strong>Different Routing:</strong> Where the training and testing datasets contain networks with different routing configurations.</li>
<li><strong>Link failures:</strong> Here, we iteratively remove one link of the topology to replicate a link failure, until we transform the network graph into a connected acyclic graph. This scenario is the most complex since a link failure triggers a change both in the routing and the topology.</li>
</ul>
<p>To compare the different techniques, we compute the prediction error with respect to the accurate performance values produced by the simulator. Particularly we use the following error metrics:</p>
<ul>
<li>Mean Absolute Percentage Error (MAPE),</li>
<li>Mean Squared Error (MSE),</li>
<li>Mean Absolute Error (MAE), and</li>
<li>Coefficient of Determination (<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.048ex;" xmlns="http://www.w3.org/2000/svg" width="2.705ex" height="1.934ex" role="img" focusable="false" viewBox="0 -833.9 1195.6 854.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mn" transform="translate(792,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container>).</li>
</ul>
<h3 id="C-Multilayer-Perceptron"><a href="#C-Multilayer-Perceptron" class="headerlink" title="C. Multilayer Perceptron"></a>C. Multilayer Perceptron</h3><p>A Multilayer Perceptron (MLP) is a basic kind of NN from the family of feedforward NNs. In short, input data is propagated unidirectionally from the input neuron layer to the output layer. There may be an arbitrary number of hidden layers between these two layers, and this determines how deep is the NN.</p>
<ul>
<li><strong>Design:</strong> Several works have leveraged an MLP to predict network performance metrics. Based on this work, we have built an MLP to predict the mean delay for each source-destination pair of nodes of a given network. The MLP has 8,280 inputs and two hidden layers with 4096 neurons and uses Rectified Linear Units (ReLU) as activation functions.</li>
<li><strong>Evaluation:</strong> Table I presents the error when predicting the network delay with respect to the results produced by the network simulator, including several traffic models. We can see that the MLP offers good accuracy for Poisson traffic, but the error increases significantly for the rest of the traffic models showing a MAPE between 23% and 84%.</li>
</ul>
<p>Likewise, Table II shows the error of predicting the delay for the datasets with the same/different routing and link failures. We can see that the MLP cannot offer an accurate estimate when predicting the delay of a previously unseen routing configuration (1150% of error). This is due to the internal architecture of the MLP. During training, the MLP performs overfitting, meaning that the model only learns about the initial network topology used for training and not for any others. When we input a new topology, it does not have sufficient information to make an accurate prediction.</p>
<h3 id="D-Recurrent-Neural-Networks"><a href="#D-Recurrent-Neural-Networks" class="headerlink" title="D. Recurrent Neural Networks"></a>D. Recurrent Neural Networks</h3><p>Recurrent Neural Networks (RNN) are a more advanced type of NN. They have shown excellent performance when processing sequential data. This is mainly because they connect some layers to the previous ones, which gives them the ability to keep the state along sequences.</p>
<ul>
<li><strong>Design:</strong> Several works propose RNNs as a way to predict network performance. In this experiment, we build a sequential model with an RNN (Figure 4). Particularly, we choose a Gated Recurrent Unit (GRU). We initialise the state of each path with the sequence of nodes in the path and the features of the traffic model (e.g., packets, bandwidth, <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.027ex;" xmlns="http://www.w3.org/2000/svg" width="1.319ex" height="1.597ex" role="img" focusable="false" viewBox="0 -694 583 706"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"></path></g></g></g></svg></mjx-container>, <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.919ex" height="1ex" role="img" focusable="false" viewBox="0 -431 406 442"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D716" d="M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z"></path></g></g></g></svg></mjx-container>, <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.448ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 640 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g></g></g></svg></mjx-container>, or on-off time), and we update the state of each link across the path. As an example, Figure 4 shows the structure of an RNN to model the sample network from Figure 3. We can see that the path of <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="5.623ex" height="2.059ex" role="img" focusable="false" viewBox="0 -705 2485.6 910"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mi" transform="translate(550,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(848,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="msub" transform="translate(1333,0)"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mn" transform="translate(749,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></mjx-container> is composed of <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.528ex" height="1.885ex" role="img" focusable="false" viewBox="0 -683 1117.6 833"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mn" transform="translate(714,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></mjx-container> and <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex;" xmlns="http://www.w3.org/2000/svg" width="2.528ex" height="1.92ex" role="img" focusable="false" viewBox="0 -683 1117.6 848.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mn" transform="translate(714,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></g></svg></mjx-container>. Once the path state has been computed, an MLP with 2 hidden layers computes the final output.</li>
<li><strong>Evaluation:</strong> We train the RNN with the same datasets as the previous subsection. Although the RNN supports better different traffic models than the MLP (Table I), it still struggles to produce accurate predictions when there are routing or topology changes (Table II), especially for different routing configurations (30% error), or when removing links (63%).</li>
</ul>
<p>The reason behind the lack of capability of RNNs to understand routing changes and link failures is due to its internal architecture. RNNs can accommodate different end-to-end paths in the network (i.e., series of routers and links), thereby, making it easier to perform predictions for paths never seen in the training phase. However, this structure cannot store and update the status of individual links in the topology due to the inter-dependency between links and traffic flows (i.e., routing). In other words, if the status of a link changes, it affects several flows, and vice-versa. This generates circular dependencies that RNNs are not able to model (see more details in Sec. IV).</p>
]]></content>
      <tags>
        <tag>论文</tag>
      </tags>
  </entry>
  <entry>
    <title>无线网络技术</title>
    <url>/created4u/2023/06/22/Wireless-Network-Review/</url>
    <content><![CDATA[<h1 id="英文缩写"><a href="#英文缩写" class="headerlink" title="英文缩写"></a>英文缩写</h1><ul>
<li>ITU, International Telecommunication Union</li>
<li>ISO, International Standards Organization</li>
<li>IEEE, Institute of Electrical and Electronics Engineers</li>
<li>IAB, Internet Architecture Board</li>
<li>IETF, Internet Engineering Task Force</li>
<li>IRTF, Internet Research Task Force</li>
<li>FHSS, Frequency Hopping Spread Spectrum</li>
<li>THSS, Time Hopping Spread Spectrum</li>
<li>DSSS, Direct Sequence Spread Spectrum</li>
<li>ARQ, Automatic Repeat Request</li>
</ul>
<h1 id="无线传输技术"><a href="#无线传输技术" class="headerlink" title="无线传输技术"></a>无线传输技术</h1><h2 id="传输媒体"><a href="#传输媒体" class="headerlink" title="传输媒体"></a>传输媒体</h2><p>数据传输系统中发送器和接收器之间的物理路径。可以分为导向的（如双绞线，同轴电缆，光纤）和非导向的（例如大气）。</p>
<h3 id="3-个重要的电磁波频段"><a href="#3-个重要的电磁波频段" class="headerlink" title="3 个重要的电磁波频段"></a>3 个重要的电磁波频段</h3><ul>
<li>1GHz - 100GHz，微波，可用于点对点传输以及卫星通信</li>
<li>30MHz - 1GHz，无线电广播</li>
<li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="7.947ex" height="2.005ex" role="img" focusable="false" viewBox="0 -864 3512.6 886"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(1722.4,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(1033,393.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g></g></g></g></g></svg></mjx-container>Hz - <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="7.947ex" height="2.022ex" role="img" focusable="false" viewBox="0 -871.8 3512.6 893.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(1722.4,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(1033,393.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(500,0)"></path></g></g></g></g></g></svg></mjx-container>Hz，红外，本地应用</li>
</ul>
<h1 id="无线局域网"><a href="#无线局域网" class="headerlink" title="无线局域网"></a>无线局域网</h1>]]></content>
      <tags>
        <tag>Wireless Network</tag>
      </tags>
  </entry>
  <entry>
    <title>STL 之字符串</title>
    <url>/created4u/2023/06/21/String-STL/</url>
    <content><![CDATA[<h1 id="string"><a href="#string" class="headerlink" title="string"></a>string</h1><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="function">string <span class="title">s1</span><span class="params">(<span class="string">"Milo_Song_2120"</span>)</span></span>;</span><br><span class="line">    <span class="type">char</span> ch[] = <span class="string">"Hello_Cpp"</span>;</span><br><span class="line">    <span class="function">string <span class="title">s2</span><span class="params">(s1)</span></span>;                       <span class="comment">// 复制字符串</span></span><br><span class="line">    <span class="function">string <span class="title">s3</span><span class="params">(s1, <span class="number">2</span>, <span class="number">5</span>)</span></span>;                 <span class="comment">// 从 s1[2] 开始，复制 5 个字符</span></span><br><span class="line">    <span class="function">string <span class="title">s4</span><span class="params">(ch, <span class="number">4</span>)</span></span>;                    <span class="comment">// 复制 ch 的前 4 个字符</span></span><br><span class="line">    <span class="function">string <span class="title">s5</span><span class="params">(<span class="number">9</span>, <span class="string">'6'</span>)</span></span>;                   <span class="comment">// 9 个字符 '6'</span></span><br><span class="line">    <span class="function">string <span class="title">s6</span><span class="params">(s1.begin(), s1.end())</span></span>;     <span class="comment">// 复制整个字符串</span></span><br><span class="line">    <span class="function">string <span class="title">s7</span><span class="params">(s1.begin(), s1.end() - <span class="number">1</span>)</span></span>; <span class="comment">// 复制除最后一个字符以外的所有字符</span></span><br><span class="line">    cout &lt;&lt; <span class="string">"s1 = "</span> &lt;&lt; s1 &lt;&lt; <span class="string">";"</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">"s2 = "</span> &lt;&lt; s2 &lt;&lt; <span class="string">";"</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">"s3 = "</span> &lt;&lt; s3 &lt;&lt; <span class="string">";"</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">"s4 = "</span> &lt;&lt; s4 &lt;&lt; <span class="string">";"</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">"s5 = "</span> &lt;&lt; s5 &lt;&lt; <span class="string">";"</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">"s6 = "</span> &lt;&lt; s6 &lt;&lt; <span class="string">";"</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">"s7 = "</span> &lt;&lt; s7 &lt;&lt; <span class="string">";"</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p>输出结果为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s1 = Milo_Song_2120;</span><br><span class="line">s2 = Milo_Song_2120;</span><br><span class="line">s3 = lo_So;</span><br><span class="line">s4 = Hell;</span><br><span class="line">s5 = 666666666;</span><br><span class="line">s6 = Milo_Song_2120;</span><br><span class="line">s7 = Milo_Song_212;</span><br></pre></td></tr></table></figure>

<h2 id="string-的大小和容量"><a href="#string-的大小和容量" class="headerlink" title="string 的大小和容量"></a>string 的大小和容量</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="function">string <span class="title">s</span><span class="params">(<span class="string">"hello"</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">"Size of s: "</span> &lt;&lt; s.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">"Length of s: "</span> &lt;&lt; s.<span class="built_in">length</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">"Max size of s: "</span> &lt;&lt; s.<span class="built_in">max_size</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">"Capacity of s: "</span> &lt;&lt; s.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line">    s.<span class="built_in">reserve</span>(<span class="number">66</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">"Capacity of s: "</span> &lt;&lt; s.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p>输出结果为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Size of s: 5</span><br><span class="line">Length of s: 5</span><br><span class="line">Max size of s: 9223372036854775791</span><br><span class="line">Capacity of s: 22</span><br><span class="line">Capacity of s: 79</span><br></pre></td></tr></table></figure>

<p>⚠️ <code>s.reserve()</code> 和 <code>s.capacity()</code> 这两个函数没搞太懂。</p>
<h2 id="string-读取"><a href="#string-读取" class="headerlink" title="string 读取"></a>string 读取</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="function">string <span class="title">s</span><span class="params">(<span class="string">"Hello_Song"</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; s.<span class="built_in">at</span>(<span class="number">4</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; s.<span class="built_in">at</span>(s.<span class="built_in">length</span>() - <span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; s[s.<span class="built_in">length</span>()] &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; s[s.<span class="built_in">length</span>() - <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p>输出结果为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">o</span><br><span class="line">g</span><br><span class="line"> </span><br><span class="line">g</span><br></pre></td></tr></table></figure>

<h2 id="string-比较"><a href="#string-比较" class="headerlink" title="string 比较"></a>string 比较</h2><p><code>compare()</code> 函数</p>
<ul>
<li><code>string1.compare(pos, n, string2)</code></li>
<li>比较结果相同，返回 0 值</li>
<li>比较结果不同<ul>
<li><code>string1</code> 的字典序先于 <code>string2</code>，返回负值</li>
<li>否则，返回正值</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="function">string <span class="title">s1</span><span class="params">(<span class="string">"abcdef"</span>)</span></span>;</span><br><span class="line">    <span class="function">string <span class="title">s2</span><span class="params">(<span class="string">"hijkl"</span>)</span></span>;</span><br><span class="line">    <span class="function">string <span class="title">s3</span><span class="params">(<span class="string">"abcdef"</span>)</span></span>;</span><br><span class="line">    <span class="function">string <span class="title">s4</span><span class="params">(<span class="string">"abcd"</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; s1.<span class="built_in">compare</span>(s2) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; s1.<span class="built_in">compare</span>(s3) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; s1.<span class="built_in">compare</span>(s4) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; s1.<span class="built_in">compare</span>(<span class="number">0</span>, <span class="number">4</span>, s4);   <span class="comment">//s1 -&gt; abcd 与 s4 比较</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p>输出结果为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-7</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<p>当然也可以直接使用比较运算符来比较。</p>
<h2 id="string-修改和替换"><a href="#string-修改和替换" class="headerlink" title="string 修改和替换"></a>string 修改和替换</h2><p><code>assign()</code> 和 <code>swap()</code> 函数可以正常使用，但是 <code>erase()</code> 函数出现问题。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="function">string <span class="title">s1</span><span class="params">(<span class="string">"ABCDEFG"</span>)</span></span>;</span><br><span class="line">    string s2, s3, s4, s5;</span><br><span class="line">    s2.<span class="built_in">assign</span>(s1);</span><br><span class="line">    cout &lt;&lt; s2 &lt;&lt; endl;</span><br><span class="line">    s3.<span class="built_in">assign</span>(s1, <span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">    cout &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line">    s4.<span class="built_in">assign</span>(<span class="number">6</span>, <span class="string">'X'</span>);</span><br><span class="line">    cout &lt;&lt; s4 &lt;&lt; endl;</span><br><span class="line">    s5.<span class="built_in">swap</span>(s1);</span><br><span class="line">    cout &lt;&lt; s5 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// ABCDEFG</span></span><br><span class="line"><span class="comment">// BCD</span></span><br><span class="line"><span class="comment">// XXXXXX</span></span><br><span class="line"><span class="comment">// ABCDEFG</span></span><br></pre></td></tr></table></figure>

<p><code>insert()</code> 函数的使用如下。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="function">string <span class="title">s1</span><span class="params">(<span class="string">"ABCDEFG"</span>)</span></span>;</span><br><span class="line">    <span class="function">string <span class="title">s2</span><span class="params">(<span class="string">"_Bonjour_"</span>)</span></span>;</span><br><span class="line">    s1.<span class="built_in">insert</span>(<span class="number">1</span>, s2); <span class="comment">// 在 s1 的位置 1 插入 s2</span></span><br><span class="line">    cout &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    s1 = <span class="string">"ABCDEFG"</span>;</span><br><span class="line">    s1.<span class="built_in">insert</span>(<span class="number">2</span>, s2, <span class="number">3</span>); <span class="comment">// 在 s1 的位置 2 插入 s2 位置 3 之后的所有字符</span></span><br><span class="line">    cout &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    s1 = <span class="string">"ABCDEFG"</span>;</span><br><span class="line">    s1.<span class="built_in">insert</span>(<span class="number">2</span>, s2, <span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">    cout &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    s1 = <span class="string">"ABCDEFG"</span>;</span><br><span class="line">    s1.<span class="built_in">insert</span>(<span class="number">0</span>, <span class="number">5</span>, <span class="string">'6'</span>);</span><br><span class="line">    cout &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// A_Bonjour_BCDEFG</span></span><br><span class="line"><span class="comment">// ABnjour_CDEFG</span></span><br><span class="line"><span class="comment">// ABnjoCDEFG</span></span><br><span class="line"><span class="comment">// 66666ABCDEFG</span></span><br></pre></td></tr></table></figure>

<p><code>append()</code> 函数的使用如下。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="function">string <span class="title">s1</span><span class="params">(<span class="string">"ABCDEFG"</span>)</span></span>;</span><br><span class="line">    <span class="function">string <span class="title">s2</span><span class="params">(<span class="string">"123456"</span>)</span></span>;</span><br><span class="line">    s1.<span class="built_in">append</span>(s2);</span><br><span class="line">    cout &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    s1 = <span class="string">"ABCDEFG"</span>;</span><br><span class="line">    s1.<span class="built_in">append</span>(s2, <span class="number">3</span>);</span><br><span class="line">    cout &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    s1 = <span class="string">"ABCDEFG"</span>;</span><br><span class="line">    s1.<span class="built_in">append</span>(s2, <span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line">    cout &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    s1 = <span class="string">"ABCDEFG"</span>;</span><br><span class="line">    s1.<span class="built_in">append</span>(<span class="number">6</span>, <span class="string">'6'</span>);</span><br><span class="line">    cout &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    s1 = <span class="string">"ABCDEFG"</span>;</span><br><span class="line">    s1.<span class="built_in">append</span>(s2.<span class="built_in">begin</span>(), s2.<span class="built_in">end</span>());</span><br><span class="line">    cout &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// ABCDEFG_Bonjour_</span></span><br><span class="line"><span class="comment">// ABCDEFGnjour_</span></span><br><span class="line"><span class="comment">// ABCDEFGnj</span></span><br><span class="line"><span class="comment">// ABCDEFG666666</span></span><br><span class="line"><span class="comment">// ABCDEFG_Bonjour_</span></span><br></pre></td></tr></table></figure>

<p><code>replace()</code> 函数的使用如下。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="function">string <span class="title">s1</span><span class="params">(<span class="string">"ABCDEFG"</span>)</span></span>;</span><br><span class="line">    <span class="function">string <span class="title">s2</span><span class="params">(<span class="string">"1234567"</span>)</span></span>;</span><br><span class="line">    s1.<span class="built_in">replace</span>(<span class="number">2</span>, <span class="number">3</span>, s2); <span class="comment">// 使用 s2 替代自 s1 位置 2 开始的 3 个字符</span></span><br><span class="line">    cout &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    s1 = <span class="string">"ABCDEFG"</span>;</span><br><span class="line">    s1.<span class="built_in">replace</span>(<span class="number">2</span>, <span class="number">3</span>, s2, <span class="number">1</span>, <span class="number">4</span>); <span class="comment">// 使用 s2 的子串 '234' 替代自 s1 位置 2 开始的 3 个字符</span></span><br><span class="line">    cout &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    s1 = <span class="string">"ABCDEFG"</span>;</span><br><span class="line">    s1.<span class="built_in">replace</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="string">'6'</span>);</span><br><span class="line">    cout &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    s1 = <span class="string">"ABCDEFG"</span>;</span><br><span class="line">    s1.<span class="built_in">replace</span>(s1.<span class="built_in">begin</span>(), s1.<span class="built_in">end</span>(), s2);</span><br><span class="line">    cout &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// AB1234567FG</span></span><br><span class="line"><span class="comment">// AB2345FG</span></span><br><span class="line"><span class="comment">// AB666666FG</span></span><br><span class="line"><span class="comment">// 1234567</span></span><br></pre></td></tr></table></figure>

<h2 id="string-输入"><a href="#string-输入" class="headerlink" title="string 输入"></a>string 输入</h2><p><code>getline()</code> 函数可以输入整行。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string s1;</span><br><span class="line"><span class="built_in">getline</span>(cin, s1);</span><br><span class="line"><span class="comment">// 下面这个与上面的相同作用</span></span><br><span class="line"><span class="built_in">getline</span>(cin, s1, <span class="string">'\n'</span>);</span><br><span class="line"><span class="comment">// 下面这个以空格作为结束标志，例如输入 'ssss sss'，实际只能得到 'ssss'</span></span><br><span class="line"><span class="built_in">getline</span>(cin, s1, <span class="string">' '</span>);</span><br></pre></td></tr></table></figure>

<h2 id="string-查找"><a href="#string-查找" class="headerlink" title="string 查找"></a>string 查找</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="function">string <span class="title">s1</span><span class="params">(<span class="string">"Hello, nice to meet you."</span>)</span></span>;</span><br><span class="line">    <span class="function">string <span class="title">alphabet</span><span class="params">(<span class="string">"abcdefghijklmnopqrstuvwxyz"</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; s1.<span class="built_in">find</span>(<span class="string">'o'</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; s1.<span class="built_in">find</span>(<span class="string">'o'</span>, <span class="number">9</span>) &lt;&lt; endl; <span class="comment">// 从位置 9 开始 find</span></span><br><span class="line">    cout &lt;&lt; s1.<span class="built_in">find</span>(<span class="string">"nice"</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; s1.<span class="built_in">find</span>(<span class="string">"nihao"</span>, <span class="number">0</span>, <span class="number">2</span>) &lt;&lt; endl; <span class="comment">// 在 s1（从位置 0 开始）中查找 "nihao" 的前两个字符</span></span><br><span class="line">    cout &lt;&lt; s1.<span class="built_in">find_first_of</span>(alphabet) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; s1.<span class="built_in">find_last_of</span>(alphabet) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; s1.<span class="built_in">find_first_not_of</span>(alphabet) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; s1.<span class="built_in">find_last_not_of</span>(alphabet) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 13</span></span><br><span class="line"><span class="comment">// 7</span></span><br><span class="line"><span class="comment">// 7</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 22</span></span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 23</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>无线网络课程复习</title>
    <url>/created4u/2023/06/21/WirelessNetwork/</url>
    <content><![CDATA[<h1 id="DV-和-DSDV"><a href="#DV-和-DSDV" class="headerlink" title="DV 和 DSDV"></a>DV 和 DSDV</h1><h2 id="DV"><a href="#DV" class="headerlink" title="DV"></a>DV</h2><h2 id="DSDV"><a href="#DSDV" class="headerlink" title="DSDV"></a>DSDV</h2><p>Ref. <a href="https://blog.csdn.net/qq_21324665/article/details/79159080">https://blog.csdn.net/qq_21324665/article/details/79159080</a></p>
<h2 id="按需路由协议"><a href="#按需路由协议" class="headerlink" title="按需路由协议"></a>按需路由协议</h2><blockquote>
<p>为什么没有开销？<br>Route discovery</p>
</blockquote>
<h3 id="DSR"><a href="#DSR" class="headerlink" title="DSR"></a>DSR</h3><p>8 分左右。</p>
<p>Ref. <a href="https://blog.csdn.net/weixin_42982240/article/details/125033059">https://blog.csdn.net/weixin_42982240/article/details/125033059</a></p>
<h3 id="AODV"><a href="#AODV" class="headerlink" title="AODV"></a>AODV</h3><p>Wi-Fi，无线网状网，zi</p>
]]></content>
      <tags>
        <tag>无线网络技术</tag>
      </tags>
  </entry>
  <entry>
    <title>关于我自己</title>
    <url>/created4u/2023/06/06/about-CN/</url>
    <content><![CDATA[<p>简体中文 | <a href="../about-TCN/index.html">繁體中文</a> | <a href="../about/index.html">English</a> | <a href="../about-FR/index.html">Français</a></p>
<img src="/created4u/2023/06/06/about-CN/code.png" class="" title="Programming is art.">

<h1 id="你好！"><a href="#你好！" class="headerlink" title="你好！"></a>你好！</h1><p>欢迎访问我的个人主页，我也非常荣幸能够同你这样有趣的灵魂在此相遇。</p>
<h1 id="学习经历"><a href="#学习经历" class="headerlink" title="学习经历"></a>学习经历</h1><ul>
<li>2017 - 2020，高中，安徽省亳州市第一中学</li>
<li>2020 - 至今，本科，吉林大学计算机科学与技术学院</li>
</ul>
<h1 id="参与项目"><a href="#参与项目" class="headerlink" title="参与项目"></a>参与项目</h1><ul>
<li>RISC-V 指令集软件仿真</li>
<li>基于 YOLOv5 的智能捡拾机器人</li>
<li>我自己的 Repositories<ul>
<li><a href="https://github.com/created4u/heartbeat.git">Heartbeat</a></li>
<li><a href="https://github.com/created4u/Coursea.git">Coursea</a></li>
</ul>
</li>
</ul>
<h1 id="所获荣誉"><a href="#所获荣誉" class="headerlink" title="所获荣誉"></a>所获荣誉</h1><p>（截止至 2023 年 8 月）</p>
<ul>
<li>2020 - 2021，吉林大学三等奖学金</li>
<li>2021 - 2022，吉林大学二等奖学金</li>
<li>2021 - 2022，吉林大学计算机科学与技术学院院优秀学生</li>
<li>2023，<a href="http://iot.sjtu.edu.cn/Default.aspx">全国大学生物联网设计竞赛</a>，东北赛区一等奖，全国总决赛二等奖</li>
</ul>
<h1 id="个人能力"><a href="#个人能力" class="headerlink" title="个人能力"></a>个人能力</h1><ul>
<li>英语水平良好，四六级均以优秀成绩通过，正在备考 TOEFL，能够流畅地阅读外文文献。</li>
<li>熟悉 C，C++，Java，Python，Kotlin，Swift，Go 等编程语言，有良好的编程能力。</li>
<li>熟悉 HTML，CSS，JavaScript，Node.js，Vue，Bootstrap 等技术，能够独立搭建网页。</li>
<li>有一定的开发经验，能够独立开发 iOS/iPadOS/macOS 和 Android 应用程序。</li>
<li>广泛接触软硬件，基础较为扎实，熟悉嵌入式开发。</li>
</ul>
<h1 id="兴趣爱好"><a href="#兴趣爱好" class="headerlink" title="兴趣爱好"></a>兴趣爱好</h1><ul>
<li>语言学习。空余时间会学习各种有趣的语言，例如 Français，Русский，Español 等语言。</li>
<li>绘画（约等于～乱画）。没有系统地学过相关知识，就是想画啥画啥。</li>
<li>阅读文学。<a href="https://en.wikipedia.org/wiki/Franz_Kafka">Kafka</a> 和 <a href="https://en.wikipedia.org/wiki/Virginia_Woolf">Woolf</a> 是我最喜欢的作家之一，虽然有时候看不太懂，但是更让我痴迷不已。</li>
<li>设计各种有意思的东西，执着于用平凡的材料创造出不平凡的事物，用颜色表达情感。</li>
<li>摄影。用相机记录下每一个值得回忆的瞬间。</li>
</ul>
<h2 id="我的小作品"><a href="#我的小作品" class="headerlink" title="我的小作品 :)"></a>我的小作品 :)</h2><p>这是几年前我画的第一幅画。</p>
<img src="/created4u/2023/06/06/about-CN/him.PNG" class="" title="The first man I drew.">

<p>这是我家仙人掌开的花。</p>
<img src="/created4u/2023/06/06/about-CN/cactus.jpeg" class="" title="Cactus flower.">
]]></content>
      <categories>
        <category>-[about]</category>
      </categories>
  </entry>
  <entry>
    <title>Présentation de soi.</title>
    <url>/created4u/2023/06/06/about-FR/</url>
    <content><![CDATA[<p>Français | <a href="../about/index.html">English</a> | <a href="../about-TCN/index.html">繁體中文</a> | <a href="../about-CN/index.html">简体中文</a></p>
<img src="/created4u/2023/06/06/about-FR/code.png" class="" title="Programming is art.">

<h1 id="Bonjour"><a href="#Bonjour" class="headerlink" title="Bonjour!"></a>Bonjour!</h1><p>Bienvenue sur ma page d’accueil personnelle, et je suis heureux de rencontrer une âme aussi intéressante que vous.</p>
<h1 id="Experience"><a href="#Experience" class="headerlink" title="Expérience"></a>Expérience</h1><ul>
<li>2017 - 2020, Premier Lycée de Bozhou, Province d’Anhui</li>
<li>2020 - 2024, Collège d’informatique et de technologie, Université de Jilin</li>
</ul>
<h1 id="Projets"><a href="#Projets" class="headerlink" title="Projets"></a>Projets</h1><ul>
<li>Émulateur basé sur RISC-V</li>
<li>Robot de prélèvement intelligent utilisant YOLOv5</li>
<li>Certains Github Repositories<ul>
<li><a href="https://github.com/created4u/heartbeat.git">Heartbeat</a></li>
<li><a href="https://github.com/created4u/Coursea.git">Coursea</a></li>
</ul>
</li>
</ul>
<h1 id="Recompenses-et-Honneurs"><a href="#Recompenses-et-Honneurs" class="headerlink" title="Récompenses et Honneurs"></a>Récompenses et Honneurs</h1><p>(Mise à jour le 29, Août, 2023)</p>
<ul>
<li>2020 - 2021, Bourse de deuxième classe, Université de Jilin</li>
<li>2021 - 2022, Bourse de troisième classe, Université de Jilin</li>
<li>2021 - 2022, Excellent étudiant universitaire, Université de Jilin</li>
<li>2023, <a href="http://iot.sjtu.edu.cn/Default.aspx">Concours national de conception IoT</a>, Premier Prix de la Région Nord-Est, Deuxième Prix de la Finale Nationale</li>
</ul>
<h1 id="Competence"><a href="#Competence" class="headerlink" title="Compétence"></a>Compétence</h1><ul>
<li>Bon niveau d’anglais, avoir réussi les CET-4 et CET-6 avec d’excellentes notes et savoir lire couramment la littérature étrangère.</li>
<li>Familier avec C, C++, Java, Python, Kotlin, Swift, Go et d’autres langages de programmation, avec une bonne capacité de programmation.</li>
<li>Familier avec HTML, CSS, JavaScript, Node.js, Vue, Bootstrap et d’autres technologies, capable de créer de manière indépendante des pages Web.</li>
<li>Capable de développer de manière indépendante des applications iOS/iPadOS/macOS et Android.</li>
<li>Etude approfondie des logiciels et du matériel, familiarisé avec le développement embarqué.</li>
</ul>
<h1 id="Loisirs"><a href="#Loisirs" class="headerlink" title="Loisirs"></a>Loisirs</h1><ul>
<li>Apprendre des langues. Quand je suis libre, apprendre différentes langues est une merveilleuse façon de gagner du temps, Français, Русский, Español… ce sont mes préférées.</li>
<li>Peinture. Juste pour le fun :P.</li>
<li>En lisant. <a href="https://en.wikipedia.org/wiki/Franz_Kafka">Kafka</a> et <a href="https://en.wikipedia.org/wiki/Virginia_Woolf">Woolf</a> sont parmi mes auteurs préférés. Bien que parfois je ne comprenne pas entièrement leur travail brillant, cela me rend encore plus captivé.</li>
<li>Concevez toutes sortes de choses intéressantes, insistez pour créer des choses extraordinaires avec des matériaux ordinaires et exprimez des émotions avec des couleurs.</li>
<li>La photographie. Enregistrement de chaque instant de la vie normale avec caméra.</li>
</ul>
<h2 id="Ma-Creation"><a href="#Ma-Creation" class="headerlink" title="Ma Création :)"></a>Ma Création :)</h2><p>Voici la première œuvre que j’ai peinte il y a plusieurs années.</p>
<img src="/created4u/2023/06/06/about-FR/him.PNG" class="" title="The first man I drew.">

<p>Et c’est une fleur de cactus chez moi.</p>
<img src="/created4u/2023/06/06/about-FR/cactus.jpeg" class="" title="Cactus flower.">
]]></content>
      <categories>
        <category>-[about]</category>
      </categories>
  </entry>
  <entry>
    <title>關於我自己</title>
    <url>/created4u/2023/06/06/about-TCN/</url>
    <content><![CDATA[<p>繁體中文 | <a href="../about-CN/index.html">简体中文</a> | <a href="../about/index.html">English</a> | <a href="../about-FR/index.html">Français</a></p>
<img src="/created4u/2023/06/06/about-TCN/code.png" class="" title="Programming is art.">

<h1 id="你好！"><a href="#你好！" class="headerlink" title="你好！"></a>你好！</h1><p>歡迎訪問我嘅個人主頁，我都非常榮幸能夠同你咁有趣嘅靈魂在此相遇。</p>
<h1 id="學習經歷"><a href="#學習經歷" class="headerlink" title="學習經歷"></a>學習經歷</h1><ul>
<li>2017 - 2020，高中，安徽省亳州市第一中學</li>
<li>2020 - 至今，本科，吉林大學計算機科學與技術學院</li>
</ul>
<h1 id="參與項目"><a href="#參與項目" class="headerlink" title="參與項目"></a>參與項目</h1><ul>
<li>RISC-V 指令集軟件仿真</li>
<li>基於 YOLOv5 嘅智能撿拾機械人</li>
<li>我自己嘅 Repositories<ul>
<li><a href="https://github.com/created4u/heartbeat.git">Heartbeat</a></li>
<li><a href="https://github.com/created4u/Coursea.git">Coursea</a></li>
</ul>
</li>
</ul>
<h1 id="所獲榮譽"><a href="#所獲榮譽" class="headerlink" title="所獲榮譽"></a>所獲榮譽</h1><p>（截止至 2023 年 8 月）</p>
<ul>
<li>2020 - 2021，吉林大學三等獎學金</li>
<li>2021 - 2022，吉林大學二等獎學金</li>
<li>2021 - 2022，吉林大學計算機科學與技術學院院優秀學生</li>
<li>2023，<a href="http://iot.sjtu.edu.cn/Default.aspx">全國大學生物聯網設計競賽</a>，東北賽區一等獎，全國總決賽二等獎</li>
</ul>
<h1 id="個人能力"><a href="#個人能力" class="headerlink" title="個人能力"></a>個人能力</h1><ul>
<li>英語水平良好，四六級均以優秀成績通過，正在備考 TOEFL，能夠流暢地閱讀外文文獻。</li>
<li>熟悉 C，C++，Java，Python，Kotlin，Swift，Go 等編程語言，有良好的編程能力。</li>
<li>熟悉 HTML，CSS，JavaScript，Node.js，Vue，Bootstrap 等技術，能夠獨立搭建網頁。</li>
<li>有一定的開發經驗，能夠獨立開發 iOS/iPadOS/macOS 和 Android 應用程序。</li>
<li>廣泛接觸軟硬件，基礎較為紮實，熟悉嵌入式開發。</li>
</ul>
<h1 id="興趣愛好"><a href="#興趣愛好" class="headerlink" title="興趣愛好"></a>興趣愛好</h1><ul>
<li>語言學習。空餘時間會學習各種有趣嘅語言，例如 Français，Русский，Español 等語言。</li>
<li>繪畫（約等於~亂畫）。冇系統咁學過相關知識，就係想畫啥畫啥。</li>
<li>閱讀文學。<a href="https://en.wikipedia.org/wiki/Franz_Kafka">Kafka</a> 同 <a href="https://en.wikipedia.org/wiki/Virginia_Woolf">Woolf</a> 係我最鍾意嘅作家之一，雖然有時候睇唔係幾明，但係更令我癡迷不已。</li>
<li>設計各種有意思嘅嘢，執著于用平凡嘅材料創造出不平凡嘅嘢，用顏色表達情感。</li>
<li>攝影。用相機記錄的每一個值得回憶嘅瞬間。</li>
</ul>
<h2 id="個人作品"><a href="#個人作品" class="headerlink" title="個人作品 :)"></a>個人作品 :)</h2><p>係幾年前我畫嘅第一幅畫。</p>
<img src="/created4u/2023/06/06/about-TCN/him.PNG" class="" title="The first man I drew.">

<p>係我屋企仙人掌開嘅花。</p>
<img src="/created4u/2023/06/06/about-TCN/cactus.jpeg" class="" title="Cactus flower.">
]]></content>
      <categories>
        <category>-[about]</category>
      </categories>
  </entry>
  <entry>
    <title>Ad hoc 网络路由协议</title>
    <url>/created4u/2023/06/24/ad-hoc-route-protocol/</url>
    <content><![CDATA[<h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><p>自组路由协议</p>
<ul>
<li>扁平路由<ul>
<li>先验式（由表驱动），路由与交通模式无关，包括普通的路由和距离向量路由<ul>
<li>FSR</li>
<li>FSLS</li>
<li>OLSR</li>
<li>TBRPF</li>
</ul>
</li>
<li>反应式（按需模式），需要时才保持路由状态<ul>
<li><strong>AODV</strong></li>
<li><strong>DSR</strong></li>
</ul>
</li>
</ul>
</li>
<li>分级路由，在平面网络中引入层次概念<ul>
<li>HSR</li>
<li>CGSR</li>
<li>ZRP</li>
<li>LANMAR</li>
</ul>
</li>
<li>地理位置协助路由<ul>
<li>GPSR</li>
<li>GeoCast</li>
<li>LAR</li>
<li>DREAM</li>
</ul>
</li>
</ul>
<h1 id="Flooding"><a href="#Flooding" class="headerlink" title="Flooding"></a>Flooding</h1><p>洪泛路由算法（Flood Routing Algorithm）是一种简单而有效的网络路由算法，它用于在没有中央控制的网络中，将数据包从源节点传递到目标节点。该算法的基本原理是在网络中的每个节点接收到数据包后，将数据包向除了发送节点之外的所有相邻节点进行转发，以便数据包能够通过网络传播，直到到达目标节点。</p>
<p>以下是洪泛路由算法的详细介绍：</p>
<ol>
<li><p>初始化：在网络中，每个节点都维护一个路由表，记录了与其相邻的节点信息。开始时，每个节点只知道它直接相连的邻居节点。</p>
</li>
<li><p>发送数据包：当一个节点要发送数据包到目标节点时，它首先检查自己的路由表，找到一个相邻节点作为下一跳，将数据包发送给该节点。</p>
</li>
<li><p>数据包接收和处理：当一个节点接收到数据包时，它<strong>首先检查数据包的目标地址</strong>。如果目标地址是自己，那么该节点就完成了数据包的传递。否则，该节点会检查数据包的源地址，并在路由表中查找下一跳节点。</p>
</li>
<li><p>数据包转发：节点在确定了下一跳节点后，将数据包复制并发送给除了源节点和下一跳节点之外的所有相邻节点。这样，数据包就会在网络中以广播的方式传播。</p>
</li>
<li><p>循环检测：为了防止数据包在网络中无限循环，每个节点都需要维护一个已经接收过的数据包列表。当节点接收到一个数据包时，它会检查列表中是否已经存在相同的数据包。如果是，则丢弃该数据包，以避免循环。</p>
</li>
<li><p>目标节点的确认：当数据包到达目标节点时，目标节点可以通过特定的方式向源节点发送确认消息，通知源节点数据包已经成功到达。</p>
</li>
</ol>
<p>尽管洪泛路由算法具有简单和容错性的优点，但也存在一些问题。其中一个主要问题是网络中的节点数量增加时，数据包的传递路径变得非常复杂，导致网络拥塞和资源浪费。为了解决这个问题，现实世界中的网络通常采用更复杂的路由算法，如距离矢量路由算法（Distance Vector Routing）和链路状态路由算法（Link State Routing），以提高网络效率和性能。</p>
<h1 id="DSR"><a href="#DSR" class="headerlink" title="DSR"></a>DSR</h1><p>DSR（Dynamic Source Routing）路由协议是一种无线自组织网络中的路由协议，适用于移动自组织网络（MANETs）和无线传感器网络（WSNs）。DSR 协议的主要特点是源节点动态地确定数据包的路由路径，而不依赖于中央控制或固定的路由表。</p>
<ol>
<li><p>节点地址</p>
<ul>
<li>每个节点在网络中都有唯一的地址标识。</li>
</ul>
</li>
<li><p>路由发现</p>
<ul>
<li>源节点在发送数据包之前不知道数据包的完整路由路径。</li>
<li>当源节点要发送数据包时，它首先检查自己的路由缓存。如果有目标地址的缓存记录，它可以直接使用该路由。</li>
<li>如果没有缓存记录，源节点将发送一条路由请求（Route Request）消息广播到整个网络中。</li>
</ul>
</li>
<li><p>路由维护</p>
<ul>
<li>当其他节点收到路由请求消息时，如果发现自己是目标节点或者拥有目标节点的缓存路由记录，它将向源节点发送路由回复（Route Reply）消息，其中包含完整的路由路径信息。</li>
<li>源节点接收到路由回复消息后，它就可以构建出数据包的完整路由路径，并将数据包发送到下一跳节点。</li>
<li>中间节点收到数据包后，根据数据包中的路由信息将其转发给下一跳节点，直到数据包到达目标节点。</li>
</ul>
</li>
<li><p>路由维护和更新</p>
<ul>
<li>在数据包传递过程中，每个节点都会维护已经接收到的路由路径，以便在需要时进行路由回复。</li>
<li>如果某个节点发现路由路径发生了变化（如节点移动或网络拓扑改变），它将发送路由错误（Route Error）消息通知网络中的其他节点，以便更新路由表和缓存记录。</li>
</ul>
</li>
<li><p>优点</p>
<ul>
<li>DSR 协议适用于无线自组织网络，特别是移动自组织网络和无线传感器网络，具有很好的适应性和灵活性。</li>
<li>由于路由路径是在数据包传递时动态确定的，因此可以避免中心化的路由控制和静态的路由表维护。</li>
<li>DSR 协议支持多路径路由，可以提高网络的容错性和可靠性。</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li>DSR 协议需要较大的路由请求和回复消息开销，特别是在网络规模较大时。</li>
<li>节点移动频繁或网络拓扑变化剧烈时，路由发现和维护过程可能会引起较高的网络开销和延迟。</li>
<li>DSR 协议没有考虑到网络的负载情况和流量控制，可能导致网络拥塞和资源浪费。</li>
</ul>
</li>
</ol>
<p>总体而言，DSR 路由协议是一种灵活而适应性强的无线自组织网络路由协议，通过动态地确定数据包的路由路径，实现了移动自组织网络中的数据传输和路由发现。然而，在实际应用中，需要综合考虑网络规模、节点移动性、开销和延迟等因素，选择合适的路由协议以满足具体的需求。</p>
<h1 id="AODV"><a href="#AODV" class="headerlink" title="AODV"></a>AODV</h1><p>AODV（Ad hoc On-Demand Distance Vector）路由协议是一种无线自组织网络中的距离向量路由协议，适用于移动自组织网络（MANETs）和无线传感器网络（WSNs）。AODV 协议的设计目标是提供一种有效的路由选择机制，以适应节点的移动性和动态网络拓扑。</p>
<ol>
<li><p>节点地址</p>
<ul>
<li>每个节点在网络中都有唯一的地址标识。</li>
</ul>
</li>
<li><p>路由发现和维护</p>
<ul>
<li>源节点在发送数据包之前不知道数据包的完整路由路径。</li>
<li>当源节点要发送数据包时，它首先检查自己的路由缓存。如果有目标地址的缓存记录，它可以直接使用该路由。</li>
<li>如果没有缓存记录，源节点将发送一条路由请求（Route Request）消息广播到整个网络中。</li>
</ul>
</li>
<li><p>路由请求和回复</p>
<ul>
<li>中间节点收到路由请求消息后，会检查自己的路由表并决定是否能够到达目标节点。</li>
<li>如果中间节点具有到目标节点的有效路由，它将向源节点发送路由回复（Route Reply）消息，其中包含完整的路由路径信息。</li>
<li>如果中间节点无法到达目标节点，它将转发路由请求消息，以便其他节点能够响应。</li>
</ul>
</li>
<li><p>路由表维护</p>
<ul>
<li>每个节点都维护一个路由表，记录了到达其他节点的下一跳节点和跳数等信息。</li>
<li>当节点接收到路由回复消息后，它将更新自己的路由表，并缓存该路由以备将来使用。</li>
<li>路由表中的路由项会根据节点的移动性和网络拓扑的变化而进行动态更新。</li>
</ul>
</li>
<li><p>路由错误处理</p>
<ul>
<li>当节点发现某个路由不再可用（如节点移动或链路中断），它将发送路由错误（Route Error）消息通知网络中的其他节点。</li>
<li>收到路由错误消息的节点会更新自己的路由表，删除无效的路由路径。</li>
</ul>
</li>
<li><p>优点</p>
<ul>
<li>AODV 协议是一种基于需求的路由协议，只在需要时才发起路由请求，减少了网络开销和延迟。</li>
<li>AODV 协议支持适应节点的移动性和动态网络拓扑，能够及时更新路由表并适应变化的网络环境。</li>
<li>AODV 协议具有较好的扩展性，适用于中小规模的无线自组织网络。</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li>AODV 协议在高度移动的网络中可能会产生较高的路由维护开销，尤其是在大规模网络中。</li>
<li>AODV 协议没有考虑到网络的负载情况和流量控制，可能导致网络拥塞和资源浪费。</li>
</ul>
</li>
</ol>
<p>总体而言，AODV 路由协议是一种有效的无线自组织网络路由协议，通过根据需求发起路由请求并动态维护路由表，实现了移动自组织网络中的数据传输和路由发现。然而，在实际应用中，需要综合考虑网络规模、节点移动性、开销和延迟等因素，选择合适的路由协议以满足具体的需求。</p>
<h1 id="LAR"><a href="#LAR" class="headerlink" title="LAR"></a>LAR</h1>]]></content>
      <tags>
        <tag>Wireless Network</tag>
        <tag>ad hoc</tag>
      </tags>
  </entry>
  <entry>
    <title>无线传输技术</title>
    <url>/created4u/2023/06/24/wireless-network-basic/</url>
    <content><![CDATA[<h1 id="无线传输媒体"><a href="#无线传输媒体" class="headerlink" title="无线传输媒体"></a>无线传输媒体</h1><ul>
<li>导向的</li>
<li>非导向的</li>
</ul>
<h2 id="常用频段"><a href="#常用频段" class="headerlink" title="常用频段"></a>常用频段</h2><ul>
<li>1GHz - 100GHz，微波，可用于点对点传输以及卫星通信</li>
<li>30MHz - 1GHz，无线电广播</li>
<li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="7.947ex" height="2.005ex" role="img" focusable="false" viewBox="0 -864 3512.6 886"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(1722.4,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(1033,393.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g></g></g></g></g></svg></mjx-container>Hz - <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="7.947ex" height="2.022ex" role="img" focusable="false" viewBox="0 -871.8 3512.6 893.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(1722.4,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(1033,393.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(500,0)"></path></g></g></g></g></g></svg></mjx-container>Hz，红外，本地应用</li>
</ul>
<h2 id="衰减"><a href="#衰减" class="headerlink" title="衰减"></a>衰减</h2><p>微波传输衰减公式</p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.148ex;" xmlns="http://www.w3.org/2000/svg" width="18.245ex" height="5.876ex" role="img" focusable="false" viewBox="0 -1647.5 8064.4 2597"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mo" transform="translate(958.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2014.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mi" transform="translate(3181.2,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(3959.2,0)"><path data-c="2061" d=""></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(4125.9,0)"><g data-mml-node="msup"><g data-mml-node="mrow"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="28" d="M701 -940Q701 -943 695 -949H664Q662 -947 636 -922T591 -879T537 -818T475 -737T412 -636T350 -511T295 -362T250 -186T221 17T209 251Q209 962 573 1361Q596 1386 616 1405T649 1437T664 1450H695Q701 1444 701 1441Q701 1436 681 1415T629 1356T557 1261T476 1118T400 927T340 675T308 359Q306 321 306 250Q306 -139 400 -430T690 -924Q701 -936 701 -940Z"></path></g><g data-mml-node="mfrac" transform="translate(736,0)"><g data-mml-node="mrow" transform="translate(220,676)"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g><g data-mml-node="mi" transform="translate(1070,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g><g data-mml-node="mi" transform="translate(723.5,-686)"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"></path></g><rect width="1790" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(2766,0) translate(0 -0.5)"><path data-c="29" d="M34 1438Q34 1446 37 1448T50 1450H56H71Q73 1448 99 1423T144 1380T198 1319T260 1238T323 1137T385 1013T440 864T485 688T514 485T526 251Q526 134 519 53Q472 -519 162 -860Q139 -885 119 -904T86 -936T71 -949H56Q43 -949 39 -947T34 -937Q88 -883 140 -813Q428 -430 428 251Q428 453 402 628T338 922T245 1146T145 1309T46 1425Q44 1427 42 1429T39 1433T36 1436L34 1438Z"></path></g></g><g data-mml-node="mn" transform="translate(3535,1176.6) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></g></svg></mjx-container></p>
<h1 id="天线"><a href="#天线" class="headerlink" title="天线"></a>天线</h1><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><ul>
<li>偶极天线</li>
<li>抛物反射天线</li>
</ul>
<h2 id="天线增益"><a href="#天线增益" class="headerlink" title="天线增益"></a>天线增益</h2><p>天线增益和有效面积之间的关系</p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.656ex;" xmlns="http://www.w3.org/2000/svg" width="22.257ex" height="5.072ex" role="img" focusable="false" viewBox="0 -1509.9 9837.7 2241.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mo" transform="translate(1063.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(2119.6,0)"><g data-mml-node="mrow" transform="translate(220,676)"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g><g data-mml-node="msub" transform="translate(1070,0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(783,-150) scale(0.707)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g><g data-mml-node="msup" transform="translate(826.5,-719.9)"><g data-mml-node="mi"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"></path></g><g data-mml-node="mn" transform="translate(616,289) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><rect width="2432.5" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(5069.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(6125.6,0)"><g data-mml-node="mrow" transform="translate(220,676)"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g><g data-mml-node="msup" transform="translate(1070,0)"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mn" transform="translate(636,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="msub" transform="translate(2109.6,0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(783,-150) scale(0.707)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g><g data-mml-node="msup" transform="translate(1421.3,-719.9)"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mn" transform="translate(466,289) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><rect width="3472.1" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></p>
<ul>
<li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.778ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 786 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g></g></g></svg></mjx-container> 为天线的增益</li>
<li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.63ex" height="1.977ex" role="img" focusable="false" viewBox="0 -716 1162.5 873.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(783,-150) scale(0.707)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g></g></svg></mjx-container> 为天线的有效面积</li>
<li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="1.244ex" height="2.059ex" role="img" focusable="false" viewBox="0 -705 550 910"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g></g></g></svg></mjx-container> 为载波频率</li>
<li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.98ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 433 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g></g></g></svg></mjx-container> 为光速</li>
<li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.027ex;" xmlns="http://www.w3.org/2000/svg" width="1.319ex" height="1.597ex" role="img" focusable="false" viewBox="0 -694 583 706"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"></path></g></g></g></svg></mjx-container> 为载波波长</li>
</ul>
<h1 id="传播方式"><a href="#传播方式" class="headerlink" title="传播方式"></a>传播方式</h1><ul>
<li>天波传播（&lt;2MHz）</li>
<li>地波传播（2-30MHz）</li>
<li>直线传播（&gt;30MHz）</li>
</ul>
<h1 id="传输损耗"><a href="#传输损耗" class="headerlink" title="传输损耗"></a>传输损耗</h1><ul>
<li>衰减和衰减失真</li>
<li>自由空间损耗</li>
<li>噪声<ul>
<li>热噪声</li>
<li>互调噪声</li>
<li>串扰</li>
<li>脉冲噪声</li>
</ul>
</li>
<li>大气吸收</li>
<li>多径</li>
<li>折射</li>
</ul>
<h1 id="移动环境中的衰退"><a href="#移动环境中的衰退" class="headerlink" title="移动环境中的衰退"></a>移动环境中的衰退</h1><p>衰退类型</p>
<ul>
<li>平面/非选择性衰退</li>
<li>选择性衰退</li>
</ul>
<p>差错补偿</p>
<ul>
<li>前向纠错</li>
<li>适应性均衡</li>
<li>分集技术</li>
</ul>
<h1 id="多普勒效应"><a href="#多普勒效应" class="headerlink" title="多普勒效应"></a>多普勒效应</h1><p>在无线电通信中，多普勒效应是指由于移动设备（如移动电话、无人机、雷达等）和基站之间的相对运动而导致信号频率发生变化的现象。这种变化可能会对通信系统的性能和可靠性产生影响，因此需要考虑和处理多普勒效应。</p>
<p>当移动设备和基站之间相对运动时，根据多普勒效应的原理，信号的频率会发生变化。具体而言，如果移动设备向基站靠近，观测者（基站）会感知到信号频率变高，称为正多普勒效应。相反，如果移动设备远离基站，观测者会感知到信号频率变低，称为负多普勒效应。</p>
<p>在无线电通信系统中，多普勒效应的处理是至关重要的，特别是对于高速移动设备或基站的情况。以下是一些常见的处理多普勒效应的方法：</p>
<ol>
<li><p>频率补偿<br>基站可以根据移动设备和基站之间的相对速度，对接收到的信号频率进行补偿。通过测量相对速度并应用适当的频率偏移，可以消除多普勒效应引起的频率偏差，从而保持通信的可靠性。</p>
</li>
<li><p>盲速估计和补偿<br>在某些情况下，移动设备可能无法直接提供其运动信息。此时，基站可以使用盲速估计算法来估计移动设备的相对速度，并相应地对接收到的信号进行频率补偿。</p>
</li>
<li><p>多天线技术<br>多天线技术（如天线阵列）可以通过空间分集和波束成形的方法减轻多普勒效应的影响。通过多路径传播的信号可以从多个方向接收，并在接收端进行合并处理，以降低多普勒效应带来的干扰。</p>
</li>
<li><p>自适应调制<br>自适应调制技术可以根据信道条件的变化，自动调整调制方式和参数。通过根据多普勒效应的影响来选择适当的调制方式，可以提高信号的可靠性和传输效率。</p>
</li>
</ol>
<h1 id="扩频"><a href="#扩频" class="headerlink" title="扩频"></a>扩频</h1><p>扩频技术（Spread Spectrum）是一种在无线通信中广泛应用的技术，它通过将信号在更宽的频带上进行传输，以提高通信的可靠性、抗干扰性和安全性。</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>扩频技术基于信号的频谱扩展原理，通过将原始信号与一个宽带的扩频码进行数学运算，使信号在更大的频带范围内传输。这个扩频码可以是一个伪随机序列，也称为扩频序列或码片。</p>
<h2 id="扩频序列"><a href="#扩频序列" class="headerlink" title="扩频序列"></a>扩频序列</h2><p>扩频序列是一串伪随机的二进制码片序列，其特点是具有较好的互相关性。发送端使用扩频序列将原始数据进行编码，接收端使用相同的扩频序列进行解码，以还原出原始数据。常用的扩频序列包括加法扩频码（例如 N 序列）和乘法扩频码（例如 Gold 码）。</p>
<h2 id="扩频方式"><a href="#扩频方式" class="headerlink" title="扩频方式"></a>扩频方式</h2><ul>
<li>直接序列扩频（Direct Sequence Spread Spectrum，DSSS）：发送端将原始信号与扩频码进行逐位的直接相乘，从而实现频谱的扩展。接收端通过与发送端使用相同的扩频码进行相关运算，将扩展的信号还原为原始信号。</li>
<li>跳频扩频（Frequency Hopping Spread Spectrum，FHSS）：发送端在一个较宽的频带内划分多个子信道，并按照一定的规律，周期性地在这些子信道之间进行切换。接收端需要与发送端保持同步，并按照相同的规律进行频道的切换，以恢复原始信号。</li>
<li>跳时扩频（Time Hopping Spread Spectrum，THSS）基于时间域上的扩频原理，在信号传输过程中，将原始信号分割成短时隙，并根据扩频码的规则进行时隙的跳跃。在每个时隙中，信号以窄带方式传输，并在不同的时隙中通过改变扩频码进行频谱扩展。</li>
<li>脉冲调频。使用调频脉冲进行数据传输，扩频函数控制调频模式。</li>
<li>混合扩频。</li>
</ul>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul>
<li>抗干扰性：扩频技术可以有效抵抗窄带干扰，因为干扰信号只会在整个频带范围内被均匀分布，而且接收端只有在正确的扩频序列下才能还原出原始信号。</li>
<li>安全性：由于扩频码是伪随机的，只有知道正确的扩频序列的接收端才能正确解码，从而实现了一定的安全性。</li>
<li>高可靠性：由于信号在更宽的频带上传输，扩频技术对信道衰落和多径效应具有较好的容忍性，提供了更可靠的通信连接。</li>
</ul>
<p>扩频技术在许多应用中得到广泛应用，包括无线局域网（WLAN）、蓝牙、CDMA 手机通信等。通过扩展信号的频谱，扩频技术提高了通信系统的性能和可靠性，使得无线通信更加稳定和安全。</p>
<h1 id="差错控制"><a href="#差错控制" class="headerlink" title="差错控制"></a>差错控制</h1><h2 id="差错检测码"><a href="#差错检测码" class="headerlink" title="差错检测码"></a>差错检测码</h2><p>差错检测码（Error Detection Code）是一种用于检测数据传输过程中错误的编码技术。它通过在数据中添加冗余位（校验位）来帮助接收方检测传输过程中可能发生的错误。差错检测码广泛应用于计算机网络、通信系统和存储介质等领域，以确保数据的可靠性和完整性。</p>
<ol>
<li><p>奇偶校验（Parity Check）<br>奇偶校验是一种基本的差错检测码。在奇偶校验中，发送方在数据中添加一个奇偶位，使得数据中 1 的个数为奇数（奇校验）或偶数（偶校验）。接收方在接收数据后重新计算奇偶位，并与接收到的校验位进行比较，以检测错误。奇偶校验可以检测到单比特错误，但无法纠正错误。</p>
</li>
<li><p>循环冗余检验（Cyclic Redundancy Check，CRC）<br>CRC 是一种常见的差错检测码，也可以用于纠正错误。CRC 通过除法运算将数据进行多项式编码，并将编码后的冗余校验码添加到数据中。接收方通过再次进行多项式除法运算，并检查接收到的冗余校验码是否匹配，以确定是否有错误发生。CRC 可以检测和纠正多比特错误。</p>
</li>
<li><p>奇偶纠错码（BCH Code）<br>奇偶纠错码是一种用于检测和纠正多比特错误的差错检测码。它在数据中添加冗余位，并使用数学算法来检测和纠正错误。奇偶纠错码可以根据不同的需求和纠错能力进行选择。</p>
</li>
<li><p>校验和（Checksum）<br>校验和是一种简单的差错检测码，常用于网络传输中。发送方将数据分成较小的块，对每个块计算校验和，并将校验和添加到数据中。接收方在接收到数据后，再次计算校验和，并与接收到的校验和进行比较。如果校验和不匹配，则认为数据存在错误。</p>
</li>
</ol>
<p>差错检测码在数据传输过程中起着重要的作用，可以帮助接收方检测传输中的错误。通过选择适当的差错检测码，可以提高数据传输的可靠性，并及时发现和处理错误。</p>
<h2 id="差错纠错码"><a href="#差错纠错码" class="headerlink" title="差错纠错码"></a>差错纠错码</h2><p>差错纠错码（Error Correction Code）是一种用于检测和纠正数据传输中的错误的编码技术。与差错检测码只能检测错误不同，差错纠错码能够在一定范围内检测错误并纠正它们，从而提高数据的可靠性和完整性。</p>
<ol>
<li><p>海明码（Hamming Code）<br>海明码是一种常用的差错纠错码。它通过在数据中添加冗余位（校验位）来纠正错误。海明码使用特定的编码规则，在数据中插入校验位，使得校验位与数据中的比特按照一定规则进行排列。接收方通过比较接收到的数据和校验位，可以检测并纠正单比特错误。海明码可以纠正单比特错误，并检测多比特错误。</p>
</li>
<li><p>重复编码<br>重复编码是一种简单的差错纠错码方法。发送方将每个比特重复发送多次，接收方通过多次接收并比较来检测和纠正错误。例如，将每个比特发送三次，如果接收到的比特中有两个或三个相同，则接收方将判断为正确。重复编码可以纠正少量的比特错误，但会增加传输的开销。</p>
</li>
<li><p>BCH 码（Bose-Chaudhuri-Hocquenghem Code）<br>BCH 码是一类常见的差错纠错码，用于纠正多比特错误。BCH 码根据所需的纠错能力和数据长度选择不同的参数。它利用数学算法将数据进行编码，并在接收方使用纠错算法对接收到的数据进行解码和纠正。BCH 码能够纠正多比特错误，具有较高的纠错能力。</p>
</li>
<li><p>RS 码（Reed-Solomon Code）<br>RS 码是一种常用的差错纠错码，被广泛应用于数据存储和通信系统中。RS 码使用多项式运算来进行编码和解码，具有强大的纠错能力。它可以纠正多比特错误，包括突发错误和随机错误。</p>
</li>
</ol>
<p>差错纠错码通过添加冗余位和利用纠错算法来提供数据纠正能力。它们在数据通信中起着重要的作用，可以检测和纠正传输过程中的错误，提高数据的可靠性和完整性。选择适当的差错纠错码取决于纠错能力要求和系统的特定需求。</p>
<h2 id="ARQ"><a href="#ARQ" class="headerlink" title="ARQ"></a>ARQ</h2><p>自动重发请求（Automatic Repeat Request，ARQ）是一种差错控制技术，用于在计算机网络中检测和纠正数据传输中的错误。ARQ 通过发送方发送数据包并等待接收方的确认（ACK）来实现错误检测和纠正。</p>
<ol>
<li><p>发送方工作流程：</p>
<ul>
<li>发送数据：发送方将数据分成较小的数据包，并通过网络发送给接收方。</li>
<li>等待确认：发送方等待接收方发送确认（ACK）信号，表示数据包已正确接收。</li>
<li>超时重发：如果发送方在一定时间内未收到确认信号，即发生超时，发送方会假设数据包丢失或损坏，并重新发送相同的数据包。</li>
</ul>
</li>
<li><p>接收方工作流程：</p>
<ul>
<li>接收数据：接收方接收发送方发送的数据包。</li>
<li>校验数据：接收方对接收到的数据包进行校验，以检测是否有错误发生。</li>
<li>发送确认：如果数据包没有错误，接收方发送确认信号（ACK）给发送方。</li>
<li>检测和丢弃重复数据包：接收方检测重复的数据包，并将其丢弃，以防止重复处理。</li>
</ul>
</li>
<li><p>ARQ 的重发机制：</p>
<ul>
<li>确认丢失：如果发送方发送了数据包但未收到确认信号，发送方假设数据包丢失，并重新发送相同的数据包。</li>
<li>错误检测：接收方在校验数据包时发现错误，将不发送确认信号，以指示发送方需要重新发送数据包。</li>
<li>超时重发：发送方设置一个超时定时器，如果在规定的时间内未收到确认信号，则认为数据包丢失，并重新发送数据包。</li>
</ul>
</li>
</ol>
<p>ARQ 的优点是能够在数据传输过程中检测和纠正错误，提高了数据的可靠性。然而，ARQ 的缺点是增加了网络的延迟和带宽开销，因为需要重复发送数据包和等待确认信号。</p>
<p>在 ARQ 中，还存在多种变体，如停止等待 ARQ 和连续 ARQ。停止等待 ARQ 是一种简单的 ARQ 方法，发送方在发送数据包后，等待接收到确认信号后才发送下一个数据包。连续 ARQ 是一种更高效的 ARQ 方法，允许发送方连续发送多个数据包，而无需等待每个数据包的确认信号。</p>
]]></content>
      <tags>
        <tag>Wireless Network</tag>
      </tags>
  </entry>
  <entry>
    <title>wireless-network-conclusion</title>
    <url>/created4u/2023/06/25/wireless-network-conclusion/</url>
    <content><![CDATA[<h1 id="英文缩写"><a href="#英文缩写" class="headerlink" title="英文缩写"></a>英文缩写</h1><ul>
<li>WAN, Wide Area Network</li>
<li>LAN, Local Area Network</li>
<li>WWAN, Wireless Wide Area Network</li>
<li>WPAN, Wireless Personal Area Network</li>
<li>WSN, Wireless Sensor Network</li>
<li>WMN, Wireless Mesh Network</li>
<li>IEEE, the Institute of Electrical and Electronics Engineers, 电气电子工程师学会</li>
<li>ITU, International Telecommunication Union, 国际电信联盟</li>
<li>ISO, International Standards Organization</li>
<li>IETF, Internet Engineering Task Force, Internet 工程任务组</li>
<li>IAB, Internet Architecture Board, Internet 体系结构委员会</li>
<li>IRTF, Internet Research Task Force, Internet 研究任务组</li>
<li>ANSI, American National Standards Institute, 美国国家标准协会</li>
<li>3GPP, The 3rd Generation Partnership Project</li>
<li>IPDR, The Internet Protocol Detail Record</li>
<li>CDMA, Code Division Multiple Access, 码分多路复用</li>
<li>ETSI, European Telecommunications Standards Institute</li>
<li>Wi-Fi, Wireless Fidelity</li>
<li>BSS, Basic Service Set</li>
<li>IBSS, Independent Basic Service Set</li>
<li>AP, Access Point</li>
<li>ESS, Extended Service Set</li>
<li>IESS, Independent Extended Service Set</li>
<li>DHCP, Dynamic Host Configuration Protocol</li>
<li>WAPI, Wireless LAN Authentication and Privacy Infrastructure, 无线局域网鉴别和保密基础结构</li>
<li>WEP, Wire Equivalent Privacy, 有线等效加密</li>
</ul>
<h1 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h1><ul>
<li>无线穿戴网，基于短距离无线通信技术与可穿戴式计算机技术，穿戴在人体上具有智能收集人体和周围环境信息的一种新型个域网</li>
<li>无线体域网 BAN，是由依附于身体的各种传感器构成的网络</li>
<li>OSI RM<ul>
<li>物理层</li>
<li>数据链路层</li>
<li>网络层</li>
<li>传输层</li>
<li>会话层</li>
<li>表示层</li>
<li>应用层</li>
</ul>
</li>
<li>微波，频率在 300MHz - 300GHz 之间的电磁波</li>
<li>天线，实现无线传输最基本的设备，可以看做为一条电子导线或导线系统，该导线系统或用于将电磁能辐射到太空，或用于将太空中的电磁能收集起来</li>
<li>天线增益，天线定向性的度量，与有理论的全向天线在各个方向所产生的输出相比，天线增益定义为在一特定方向上的功率输出</li>
<li>衰减，信号的强度随着跨越的传输媒介的距离而降低</li>
<li>自由空间损耗，信号会随着距离发散，具有固定面积的天线离发射天线越远，接收的信号功率越低</li>
</ul>
<h1 id="部分知识点"><a href="#部分知识点" class="headerlink" title="部分知识点"></a>部分知识点</h1><h2 id="无线网络的分类（应用）"><a href="#无线网络的分类（应用）" class="headerlink" title="无线网络的分类（应用）"></a>无线网络的分类（应用）</h2><ul>
<li>无线传感器网络</li>
<li>无线 Mesh 网络</li>
<li>无线穿戴网络</li>
<li>无线体域网络</li>
</ul>
<h2 id="无线网络的协议模型特点"><a href="#无线网络的协议模型特点" class="headerlink" title="无线网络的协议模型特点"></a>无线网络的协议模型特点</h2><ul>
<li>基于分层体系结构</li>
<li>不关注路由问题，没有网络层的协议，采用传统的 IP</li>
<li>存在共享访问介质的问题，因此 MAC 协议是无线网络协议的重点</li>
</ul>
<h2 id="ISM-频段"><a href="#ISM-频段" class="headerlink" title="ISM 频段"></a>ISM 频段</h2><ul>
<li>902MHz~928MHz</li>
<li>2.4GHz~2.4835GHz</li>
<li>5.735GHz~5.860GHz</li>
</ul>
<h2 id="直线传输系统中的损伤"><a href="#直线传输系统中的损伤" class="headerlink" title="直线传输系统中的损伤"></a>直线传输系统中的损伤</h2><ul>
<li>衰减和衰减失真</li>
<li>自由空间损耗</li>
<li>噪声</li>
<li>大气吸收</li>
<li>多径</li>
<li>折射</li>
</ul>
<h2 id="不同-IFS-的作用"><a href="#不同-IFS-的作用" class="headerlink" title="不同 IFS 的作用"></a>不同 IFS 的作用</h2><ul>
<li>SIFS，用于所有立即响应的动作</li>
<li>PIFS，在发布轮询时，被中央控制器用于 PCF 模式</li>
<li>DIFS，非同步侦的接入竞争</li>
</ul>
<h2 id="WLAN-的拓扑结构"><a href="#WLAN-的拓扑结构" class="headerlink" title="WLAN 的拓扑结构"></a>WLAN 的拓扑结构</h2><ul>
<li>分布对等式拓扑</li>
<li>基础结构集中式拓扑</li>
<li>ESS 网络拓扑</li>
<li>中继或桥接型网络拓扑</li>
</ul>
<h2 id="WLAN-的服务"><a href="#WLAN-的服务" class="headerlink" title="WLAN 的服务"></a>WLAN 的服务</h2><ul>
<li>STA 服务（SS）<ul>
<li>认证</li>
<li>解除认证</li>
<li>保密</li>
<li>MAC 服务数据单元传送</li>
</ul>
</li>
<li>分布式系统服务（DSS）<ul>
<li>联结</li>
<li>重新联结</li>
<li>解除联结</li>
<li>分布</li>
<li>集成</li>
</ul>
</li>
</ul>
<h2 id="无线-Mesh-网络与蜂窝网络的主要区别"><a href="#无线-Mesh-网络与蜂窝网络的主要区别" class="headerlink" title="无线 Mesh 网络与蜂窝网络的主要区别"></a>无线 Mesh 网络与蜂窝网络的主要区别</h2><ul>
<li>可靠性提高，自愈性强</li>
<li>传输速率大大提高</li>
<li>投资成本降低</li>
<li>网络配置和维护简便快捷</li>
</ul>
<h2 id="无线-Mesh-网络与-WLAN-的主要区别"><a href="#无线-Mesh-网络与-WLAN-的主要区别" class="headerlink" title="无线 Mesh 网络与 WLAN 的主要区别"></a>无线 Mesh 网络与 WLAN 的主要区别</h2><ul>
<li>从拓扑结构上看，WLAN 是典型的点对多点（P2MP，Point to Multiple Points）网络，而且采取单跳方式，因而数据不可转发。WMN 可以通过 WR 对数据进行智能转发（需要对 WLAN 传统的 AP 功能进行扩展和改进）。</li>
<li>从协议上看，WMN 与移动 Ad Hoc 网络基本类似。WLAN 的 MAC 协议完成的是本地业务的接入，而 WMN 则有两种可能，一种是本地业务的接入，另一种是其他节点业务的转发。对于路由协议，WLAN 是静态的因特网路由协议和移动 IP；但 WMN 则主要是动态的按需发现的路由协议，只具有较短暂的生命周期。</li>
</ul>
<h2 id="无线-Mesh-网络与-Ad-Hoc-的主要区别"><a href="#无线-Mesh-网络与-Ad-Hoc-的主要区别" class="headerlink" title="无线 Mesh 网络与 Ad Hoc 的主要区别"></a>无线 Mesh 网络与 Ad Hoc 的主要区别</h2><ul>
<li>WMN 由无线路由器构成的无线骨干网组成。该无线骨干网提供了大范围的信号覆盖与节点连接。移动 Ad Hoc 网络的节点都兼有独立路由和主机功能，节点地位平等，接通性是依赖端节点的平等合作实现的，健壮性比 WMN 差。</li>
<li>WMN 节点移动性低于移动 Ad Hoc 网络中的节点，所以 WMN 注重的是“无线”，而移动 Ad Hoc 网络更强调的是“移动”。</li>
<li>从网络结构来看，WMN 多为静态或弱移动的拓扑，而移动 Ad Hoc 网络多为随意移动(包括高速移动)的网络拓扑。</li>
<li>WMN 与移动 Ad Hoc 网络的业务模式不同，前者节点的主要业务是来往于因特网的业务，后者节点的主要业务是任意一对节点之间的业务流。</li>
<li>从应用来看，WMN 主要是因特网或宽带多媒体通信业务的接入，而移动 Ad Hoc 网络主要用于军事或其他专业通信。</li>
</ul>
<h2 id="WMN-的优缺点"><a href="#WMN-的优缺点" class="headerlink" title="WMN 的优缺点"></a>WMN 的优缺点</h2><ul>
<li>优点<ul>
<li>可靠性大大增强</li>
<li>具有冲突保护机制</li>
<li>简化链路设计</li>
<li>网络的覆盖范围增大</li>
<li>组网灵活、维护方便</li>
<li>投资成本低、风险小</li>
</ul>
</li>
<li>缺点<ul>
<li>对于不同射频信道的 WMN 的研究还处于试验研制阶段，性能改善总体来说还不太满</li>
<li>在 WMN 路由准则和选择算法等方面，目前提出的特别适用于 WMN 的路由协议寥寥无几</li>
<li>在 WMN 连接性和多路支持方面，每个节点链路连接度也是一个至关重要的问题，并非使用射频信道数越多，网络性能越好，射频信道数增加会带来设备开销和成本上升，同时可能会带来更多的干扰问题</li>
<li>在 WMN 带宽利用和资源分配算法方面，目前还没有提出非常有效的可用算法和协议，相关问题还有待研究</li>
</ul>
</li>
</ul>
<h1 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h1><h2 id="信道容量"><a href="#信道容量" class="headerlink" title="信道容量"></a>信道容量</h2><p>在信号平均功率有限的⽩噪声（指通信系统内部本身产⽣的噪声）信道中，信道的极限数据传输率（即信道容量）为</p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.552ex;" xmlns="http://www.w3.org/2000/svg" width="24.201ex" height="4.676ex" role="img" focusable="false" viewBox="0 -1381 10696.9 2067"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mo" transform="translate(1037.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2093.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="msub" transform="translate(3308.2,0)"><g data-mml-node="mi"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"></path></g><g data-mml-node="mn" transform="translate(1311,-241.4) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(5022.8,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mo" transform="translate(5022.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(5411.8,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(6134,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(7134.2,0)"><g data-mml-node="mi" transform="translate(341.5,676)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(220,-686)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><rect width="1088" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(8462.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(8851.2,0)"><path data-c="3B" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 85 94 103T137 121Q202 121 202 8Q202 -44 183 -94T144 -169T118 -194Q115 -194 106 -186T95 -174Q94 -171 107 -155T137 -107T160 -38Q161 -32 162 -22T165 -4T165 4Q165 5 161 4T142 0Q110 0 94 18T78 60Z"></path></g><g data-mml-node="mi" transform="translate(9295.9,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(9724.9,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(10227.9,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g></g></svg></mjx-container></p>
<ul>
<li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.459ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 645 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g></g></g></svg></mjx-container> 表示信号功率</li>
<li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.009ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 888 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g></g></svg></mjx-container> 表示噪声功率</li>
<li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="2.371ex" height="1.595ex" role="img" focusable="false" viewBox="0 -683 1048 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g></g></g></svg></mjx-container> 为信道带宽</li>
<li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.719ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 760 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g></g></g></svg></mjx-container> 为信道容量</li>
</ul>
<h2 id="Nyquist-准则"><a href="#Nyquist-准则" class="headerlink" title="Nyquist 准则"></a>Nyquist 准则</h2><p>离散⽆噪声的数字信道信道容量为</p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.546ex;" xmlns="http://www.w3.org/2000/svg" width="14.413ex" height="2.141ex" role="img" focusable="false" viewBox="0 -705 6370.4 946.4"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mo" transform="translate(1037.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2093.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(2593.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="msub" transform="translate(3808.2,0)"><g data-mml-node="mi"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"></path></g><g data-mml-node="mn" transform="translate(1311,-241.4) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(5522.8,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(5689.4,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g></g></g></svg></mjx-container></p>
<ul>
<li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="2.371ex" height="1.595ex" role="img" focusable="false" viewBox="0 -683 1048 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g></g></g></svg></mjx-container> 为信道的带宽（Hz）</li>
<li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.541ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 681 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g></g></g></svg></mjx-container> 为代码采⽤的进制数</li>
</ul>
]]></content>
      <tags>
        <tag>Wireless Network</tag>
      </tags>
  </entry>
  <entry>
    <title>About Me</title>
    <url>/created4u/2023/06/06/about/</url>
    <content><![CDATA[<p>English | <a href="../about-TCN/index.html">繁體中文</a> | <a href="../about-CN/index.html">简体中文</a> | <a href="../about-FR/index.html">Français</a></p>
<img src="/created4u/2023/06/06/about/code.png" class="" title="Programming is art.">

<h1 id="Hello"><a href="#Hello" class="headerlink" title="Hello!"></a>Hello!</h1><p>Welcome to my personal homepage, and I’m glad to meet such an interesting soul as you.</p>
<h1 id="Experience"><a href="#Experience" class="headerlink" title="Experience"></a>Experience</h1><ul>
<li>2017 - 2020, No.1 High School of Bozhou, Anhui Province</li>
<li>2020 - 2024, College of Computer Science and Technology, Jilin University</li>
</ul>
<h1 id="Projects"><a href="#Projects" class="headerlink" title="Projects"></a>Projects</h1><ul>
<li>Emulator based on RISC-V</li>
<li>Intelligent picking robot using YOLOv5</li>
<li>Some repositories<ul>
<li><a href="https://github.com/created4u/heartbeat.git">Heartbeat</a></li>
<li><a href="https://github.com/created4u/Coursea.git">Coursea</a></li>
</ul>
</li>
</ul>
<h1 id="Awards"><a href="#Awards" class="headerlink" title="Awards"></a>Awards</h1><p>(Updated on 29, August, 2023)</p>
<ul>
<li>2020 - 2021, Second Class Scholarship, Jilin University</li>
<li>2021 - 2022, Third Class Scholarship, Jilin University</li>
<li>2021 - 2022, College Excellent Student, Jilin University</li>
<li>2023, <a href="http://iot.sjtu.edu.cn/Default.aspx">National IoT Design Competition</a>, First Prize of Northeast Region, Second Prize of National Finals</li>
</ul>
<h1 id="Competence"><a href="#Competence" class="headerlink" title="Competence"></a>Competence</h1><ul>
<li>Good level of English, passed CET-4 and CET-6 with excellent grades, and can read foreign literature fluently.</li>
<li>Familiar with C, C++, Java, Python, Kotlin, Swift, Go and other programming languages, with good programming ability.</li>
<li>Familiar with HTML, CSS, JavaScript, Node.js, Vue, Bootstrap and other technologies, able to independently build web pages.</li>
<li>Able to independently develop iOS/iPadOS/macOS and Android applications.</li>
<li>Extensive study of software and hardware, familiar with embedded development.</li>
</ul>
<h1 id="Hobbies"><a href="#Hobbies" class="headerlink" title="Hobbies"></a>Hobbies</h1><ul>
<li>Learning languages. When I’m free, learning different languages is a wonderful way to consume time, Français, Русский, Español… those are my favorites.</li>
<li>Painting. Just for fun :P.</li>
<li>Reading. <a href="https://en.wikipedia.org/wiki/Franz_Kafka">Kafka</a> and <a href="https://en.wikipedia.org/wiki/Virginia_Woolf">Woolf</a> are among my favorite authors. Although sometimes I don’t fully understand their brilliant work, it makes me even more engrossed.</li>
<li>Design all kinds of interesting things, insist on creating extraordinary things with ordinary materials, and express emotions with colors.</li>
<li>Photography. Recording every moment of normal life with camera.</li>
</ul>
<h2 id="My-Works"><a href="#My-Works" class="headerlink" title="My Works :)"></a>My Works :)</h2><p>Here is the first work I painted several years ago.</p>
<img src="/created4u/2023/06/06/about/him.PNG" class="" title="The first man I drew.">

<p>And this is a flower of cactus in my home.</p>
<img src="/created4u/2023/06/06/about/cactus.jpeg" class="" title="Cactus flower.">
]]></content>
      <categories>
        <category>-[about]</category>
      </categories>
  </entry>
  <entry>
    <title>WLAN</title>
    <url>/created4u/2023/06/24/wireless-network-wlan/</url>
    <content><![CDATA[<h1 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h1><ul>
<li>站 Station, STA<ul>
<li>终端用户设备</li>
<li>无线网络接口</li>
<li>网络软件</li>
</ul>
</li>
<li>无线介质 Wireless Medium, VM</li>
<li>基站/接入点 Base Station, BS / Access Point, AP</li>
<li>分布式系统 Distribution System, DS</li>
</ul>
<h1 id="拓扑结构"><a href="#拓扑结构" class="headerlink" title="拓扑结构"></a>拓扑结构</h1><ul>
<li>分布对等式拓扑</li>
<li>基础结构集中式拓扑</li>
<li>ESS 网络拓扑</li>
<li>中继或桥接型网络拓扑</li>
</ul>
<h1 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h1><ul>
<li>STA 服务 SS</li>
<li>分布式系统服务 DSS</li>
</ul>
]]></content>
      <tags>
        <tag>Wireless Network</tag>
        <tag>WLAN</tag>
      </tags>
  </entry>
</search>
